import { defineComponent, shallowRef, toRefs, ref, computed, toRef, useAttrs, useSlots, openBlock, createBlock, unref, mergeProps, withKeys, withModifiers, createSlots, withCtx, createElementBlock, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode } from "vue";
import { i as isNil, p as pick, o as omit } from "../../../vendor.js";
import { s as safeCSSLength } from "../../utils/css.js";
import { u as useCounterPropsValidation } from "./hooks/useCounterPropsValidation.js";
import { V as VaInputWrapper } from "../va-input-wrapper/index.js";
import { V as VaButton } from "../va-button/index.js";
import { a as useFocusEmits, u as useFocus } from "../../composables/useFocus.js";
import { u as useLongPress } from "../../composables/useLongPress.js";
import { e as extractComponentProps } from "../../utils/component-options/extract-component-options.js";
import { u as useFormFieldProps } from "../../composables/useFormField.js";
import { u as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { u as useClearableProps } from "../../composables/useClearable.js";
import { u as useValidationEmits, a as useValidation } from "../../composables/useValidation.js";
import { u as useTemplateRef } from "../../composables/useTemplateRef.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { f as filterComponentProps } from "../../utils/component-options/filter-props.js";
import { u as useEmitProxy } from "../../composables/useEmitProxy.js";
const _hoisted_1 = ["value", "aria-live"];
const { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(
  ["change"]
);
const { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([
  { listen: "click-prepend", emit: "click:decrease-button" },
  { listen: "click-append", emit: "click:increase-button" },
  { listen: "click-prepend-inner", emit: "click:decrease-icon" },
  { listen: "click-append-inner", emit: "click:increase-icon" }
]);
const VaInputWrapperProps = extractComponentProps(VaInputWrapper);
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaCounter",
    inheritAttrs: false
  },
  __name: "VaCounter",
  props: {
    ...useFormFieldProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    ...useClearableProps,
    ...VaInputWrapperProps,
    // input
    modelValue: { type: [String, Number], default: 0 },
    manualInput: { type: Boolean, default: false },
    min: { type: Number },
    max: { type: Number },
    step: { type: Number, default: 1 },
    color: { type: String, default: "primary" },
    // icons & buttons
    increaseIcon: { type: String, default: "va-plus" },
    decreaseIcon: { type: String, default: "va-minus" },
    buttons: { type: Boolean, default: false },
    flat: { type: Boolean, default: true },
    rounded: { type: Boolean, default: false },
    margins: { type: [String, Number], default: "4px" },
    longPressDelay: { type: Number, default: 500 },
    ariaLabel: { type: String, default: "$t:counterValue" },
    ariaDecreaseLabel: { type: String, default: "$t:decreaseCounter" },
    ariaIncreaseLabel: { type: String, default: "$t:increaseCounter" }
  },
  emits: [
    "update:modelValue",
    ...useValidationEmits,
    ...createInputEmits(),
    ...createFieldEmits(),
    ...useFocusEmits
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const input = shallowRef();
    const { min = ref(void 0), max = ref(void 0), step } = toRefs(props);
    const {
      isFocused,
      focus,
      blur
    } = useFocus(input, emit);
    const { valueComputed } = useStateful(props, emit);
    const reset = () => withoutValidation(() => {
      emit("update:modelValue", props.clearValue);
      emit("clear");
      resetValidation();
    });
    const {
      computedError,
      computedErrorMessages,
      withoutValidation,
      resetValidation
    } = useValidation(props, emit, { reset, focus, value: valueComputed });
    const setCountInput = ({ target }) => {
      valueComputed.value = Number(target == null ? void 0 : target.value);
    };
    const setCountChange = ({ target }) => {
      calculateCounterValue(Number(target == null ? void 0 : target.value));
    };
    const getRoundDownWithStep = (value) => {
      if (typeof min.value === "undefined" || !step.value) {
        return value;
      }
      return min.value + step.value * Math.floor((value - min.value) / step.value);
    };
    const calculateCounterValue = (counterValue) => {
      if (typeof min.value !== "undefined" && counterValue < min.value) {
        valueComputed.value = min.value;
        return;
      }
      if (max.value && counterValue > max.value) {
        valueComputed.value = getRoundDownWithStep(max.value);
        return;
      }
      valueComputed.value = getRoundDownWithStep(counterValue);
    };
    const isMinReached = computed(() => {
      if (isNil(min.value)) {
        return false;
      }
      return Number(valueComputed.value) <= min.value;
    });
    const isMaxReached = computed(() => {
      if (isNil(max.value)) {
        return false;
      }
      return step.value ? Number(valueComputed.value) > max.value - step.value : Number(valueComputed.value) >= max.value;
    });
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const isDecreaseActionDisabled = computed(() => isMinReached.value || props.disabled);
    const isIncreaseActionDisabled = computed(() => isMaxReached.value || props.disabled);
    const decreaseCount = () => {
      if (isDecreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) - step.value);
    };
    const increaseCount = () => {
      if (isIncreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) + step.value);
    };
    useLongPress(useTemplateRef("decreaseButtonRef"), {
      onUpdate: decreaseCount,
      delay: toRef(props, "longPressDelay")
    });
    useLongPress(useTemplateRef("increaseButtonRef"), {
      onUpdate: increaseCount,
      delay: toRef(props, "longPressDelay")
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const decreaseIconProps = computed(() => ({
      class: { "va-counter__icon--inactive": isDecreaseActionDisabled.value },
      color: colorComputed.value,
      icon: props.decreaseIcon,
      plain: true,
      disabled: isDecreaseActionDisabled.value,
      readonly: props.readonly,
      tabindex: -1,
      "aria-label": tp(props.ariaDecreaseLabel),
      ...!isDecreaseActionDisabled.value && { onClick: decreaseCount }
    }));
    const increaseIconProps = computed(() => ({
      class: { "va-counter__icon--inactive": isIncreaseActionDisabled.value },
      color: colorComputed.value,
      icon: props.increaseIcon,
      plain: true,
      disabled: isIncreaseActionDisabled.value,
      readonly: props.readonly,
      tabindex: -1,
      "aria-label": tp(props.ariaIncreaseLabel),
      ...!isIncreaseActionDisabled.value && { onClick: increaseCount }
    }));
    const isSquareCorners = computed(() => (typeof props.margins === "string" ? parseFloat(props.margins) : props.margins) === 0);
    const buttonsColor = () => {
      if (isFocused.value) {
        return props.color;
      }
      return "background-border";
    };
    const buttonProps = computed(() => ({
      ...pick(props, ["color", "textColor"]),
      round: props.rounded,
      preset: props.flat ? "secondary" : "",
      borderColor: props.flat ? buttonsColor() : ""
    }));
    const decreaseButtonProps = computed(() => ({
      ...buttonProps.value,
      icon: props.decreaseIcon,
      disabled: isDecreaseActionDisabled.value,
      "aria-label": tp(props.ariaDecreaseLabel),
      ...!isDecreaseActionDisabled.value && { onClick: decreaseCount }
    }));
    const increaseButtonProps = computed(() => ({
      ...buttonProps.value,
      icon: props.increaseIcon,
      disabled: isIncreaseActionDisabled.value,
      "aria-label": tp(props.ariaIncreaseLabel),
      ...!isIncreaseActionDisabled.value && { onClick: increaseCount }
    }));
    const { tp } = useTranslation();
    const attrs = useAttrs();
    const slots = useSlots();
    const inputAttributesComputed = computed(() => ({
      tabindex: tabIndexComputed.value,
      "aria-label": tp(props.ariaLabel),
      "aria-valuemin": min.value,
      "aria-valuemax": max.value,
      ...omit(attrs, ["class", "style"]),
      ...pick(props, ["disabled", "min", "max", "step"]),
      readonly: props.readonly || !props.manualInput
    }));
    const classComputed = computed(() => [
      attrs.class,
      { "va-counter--input-square": isSquareCorners.value },
      { "va-counter--content-slot": slots.content && props.buttons }
    ].filter(Boolean));
    const styleComputed = computed(() => ({
      ...attrs.style || {}
    }));
    const marginComputed = computed(() => safeCSSLength(props.margins));
    useCounterPropsValidation(props);
    const fieldListeners = createFieldListeners(emit);
    const inputListeners = createInputListeners(emit);
    const inputWrapperPropsComputed = filterComponentProps(VaInputWrapperProps);
    __expose({
      focus,
      blur,
      decreaseCount,
      increaseCount,
      reset
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(VaInputWrapper), mergeProps({ class: "va-counter" }, { ...unref(fieldListeners), ...unref(inputWrapperPropsComputed) }, {
        class: classComputed.value,
        style: styleComputed.value,
        focused: unref(isFocused),
        error: unref(computedError),
        "error-messages": unref(computedErrorMessages),
        onKeydown: [
          withKeys(withModifiers(increaseCount, ["prevent"]), ["up"]),
          withKeys(withModifiers(increaseCount, ["prevent"]), ["right"]),
          withKeys(withModifiers(decreaseCount, ["prevent"]), ["down"]),
          withKeys(withModifiers(decreaseCount, ["prevent"]), ["left"])
        ]
      }), createSlots({
        default: withCtx(() => [
          !_ctx.$slots.content ? (openBlock(), createElementBlock("input", mergeProps({
            key: 0,
            ref_key: "input",
            ref: input,
            class: "va-input__content__input",
            type: "number",
            inputmode: "decimal"
          }, { ...inputAttributesComputed.value, ...unref(inputListeners) }, {
            value: unref(valueComputed),
            "aria-live": _ctx.$props.disabled ? "off" : "polite",
            onInput: setCountInput,
            onChange: setCountChange
          }), null, 16, _hoisted_1)) : createCommentVNode("", true)
        ]),
        _: 2
      }, [
        _ctx.$props.buttons ? {
          name: "prepend",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__prepend-wrapper",
              style: normalizeStyle({ marginRight: marginComputed.value }),
              onMousedown: _cache[0] || (_cache[0] = withModifiers(
                //@ts-ignore
                (...args) => unref(focus) && unref(focus)(...args),
                ["prevent"]
              ))
            }, [
              renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount })), () => [
                createVNode(unref(VaButton), mergeProps({ class: "va-counter__button-decrease" }, decreaseButtonProps.value, { ref: "decreaseButtonRef" }), null, 16)
              ])
            ], 36)
          ]),
          key: "0"
        } : {
          name: "prependInner",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__prepend-inner",
              onMousedown: _cache[1] || (_cache[1] = withModifiers(
                //@ts-ignore
                (...args) => unref(focus) && unref(focus)(...args),
                ["prevent"]
              ))
            }, [
              renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount })), () => [
                createVNode(unref(VaButton), mergeProps(decreaseIconProps.value, { ref: "decreaseButtonRef" }), null, 16)
              ])
            ], 32)
          ]),
          key: "1"
        },
        _ctx.$props.buttons ? {
          name: "append",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__append-wrapper",
              style: normalizeStyle({ marginLeft: marginComputed.value }),
              onMousedown: _cache[2] || (_cache[2] = withModifiers(
                //@ts-ignore
                (...args) => unref(focus) && unref(focus)(...args),
                ["prevent"]
              ))
            }, [
              renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount })), () => [
                createVNode(unref(VaButton), mergeProps({ class: "va-counter__button-increase" }, increaseButtonProps.value, { ref: "increaseButtonRef" }), null, 16)
              ])
            ], 36)
          ]),
          key: "2"
        } : {
          name: "appendInner",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__append-inner",
              onMousedown: _cache[3] || (_cache[3] = withModifiers(
                //@ts-ignore
                (...args) => unref(focus) && unref(focus)(...args),
                ["prevent"]
              ))
            }, [
              renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount })), () => [
                createVNode(unref(VaButton), mergeProps(increaseIconProps.value, { ref: "increaseButtonRef" }), null, 16)
              ])
            ], 32)
          ]),
          key: "3"
        },
        _ctx.$slots.content ? {
          name: "default",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              ref_key: "input",
              ref: input,
              tabindex: "0",
              class: "va-counter__content-wrapper"
            }, [
              renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps({ ...slotScope, value: Number(unref(valueComputed)) })))
            ], 512)
          ]),
          key: "4"
        } : void 0
      ]), 1040, ["class", "style", "focused", "error", "error-messages", "onKeydown"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaCounter.vue_vue_type_script_setup_true_lang.js.map
