import { defineComponent, useCssVars, computed, openBlock, createElementBlock, normalizeStyle, createCommentVNode, renderSlot } from "vue";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
const _hoisted_1 = { class: "va-aspect-ratio" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaAspectRatio"
  },
  __name: "VaAspectRatio",
  props: {
    ...useComponentPresetProp,
    ratio: {
      type: [Number, String],
      default: "auto",
      validator: (v) => {
        if (typeof v === "number") {
          return v > 0;
        }
        return v === "auto";
      }
    },
    contentHeight: { type: Number, default: 1 },
    contentWidth: { type: Number, default: 1 },
    maxWidth: {
      type: Number,
      default: 0,
      validator: (v) => v >= 0
    }
  },
  setup(__props) {
    useCssVars((_ctx) => ({
      "26ed1a0b": maxWidthComputed.value
    }));
    const props = __props;
    const aspectRatio = computed(() => {
      if (props.ratio === "auto" && props.contentHeight === 1 && props.contentWidth === 1) {
        return 0;
      }
      if (!isNaN(+props.ratio)) {
        return props.ratio;
      }
      return props.contentWidth / props.contentHeight;
    });
    const stylesComputed = computed(() => {
      if (!aspectRatio.value) {
        return;
      }
      return { paddingBottom: `${1 / aspectRatio.value * 100}%` };
    });
    const maxWidthComputed = computed(() => props.maxWidth ? `${props.maxWidth}px` : void 0);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        stylesComputed.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          style: normalizeStyle(stylesComputed.value)
        }, null, 4)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default")
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaAspectRatio.vue_vue_type_script_setup_true_lang.js.map
