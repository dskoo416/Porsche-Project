import { PropType } from 'vue';
import type { ButtonOption } from './types';
import type { StringOrFunction } from '../../composables';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: string;
    };
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    textBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    target: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    gradient: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    replace: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    loading: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    disabled: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    to: {
        type: PropType<NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | Record<string, any> | undefined> | undefined;
    };
    append: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    exact: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    backgroundOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    plain: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    round: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    iconRight: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    iconColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    pressedBehavior: {
        type: PropType<NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"opacity" | "mask" | undefined> | undefined;
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    hoverBehavior: {
        type: PropType<NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"opacity" | "mask" | undefined> | undefined;
    };
    hoverOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    grow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: string;
    };
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    textBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    valueBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    trackBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    disabledBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    groupBy: {
        type: PropType<StringOrFunction>;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    target: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    gradient: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    replace: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    loading: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    disabled: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    to: {
        type: PropType<NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined>>;
        required: true;
        default: NonNullable<string | Record<string, any> | undefined> | undefined;
    };
    append: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    exact: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    backgroundOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    plain: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    round: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    iconRight: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    iconColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    pressedBehavior: {
        type: PropType<NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"opacity" | "mask" | undefined> | undefined;
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    hoverBehavior: {
        type: PropType<NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"opacity" | "mask" | undefined> | undefined;
    };
    hoverOpacity: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    grow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: string | number | boolean;
    type: string;
    target: string;
    color: string;
    textColor: string;
    icon: string;
    borderColor: string;
    gradient: NonNullable<boolean | undefined>;
    tag: string;
    size: NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    replace: NonNullable<NonNullable<boolean | undefined> | undefined>;
    loading: NonNullable<NonNullable<boolean | undefined> | undefined>;
    disabled: NonNullable<NonNullable<boolean | undefined> | undefined>;
    to: NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined>;
    append: NonNullable<NonNullable<boolean | undefined> | undefined>;
    exact: NonNullable<NonNullable<boolean | undefined> | undefined>;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    textOpacity: number;
    backgroundOpacity: number;
    plain: NonNullable<NonNullable<boolean | undefined> | undefined>;
    round: NonNullable<NonNullable<boolean | undefined> | undefined>;
    iconRight: string;
    iconColor: string;
    pressedBehavior: NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>;
    pressedOpacity: number;
    pressedMaskColor: string;
    hoverBehavior: NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined>;
    hoverOpacity: number;
    hoverMaskColor: string;
    grow: NonNullable<boolean | undefined>;
    toggleColor: string;
    textBy: StringOrFunction;
    valueBy: StringOrFunction;
    trackBy: StringOrFunction;
    disabledBy: StringOrFunction;
    groupBy: StringOrFunction;
}, {}>;
export default _default;
