export declare const VaModal: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    }, {
        show: () => void;
        hide: (cb?: (() => void) | undefined) => void;
        toggle: () => void;
        cancel: () => void;
        ok: () => void;
        onBeforeEnterTransition: (el: HTMLElement) => void;
        onAfterEnterTransition: (el: HTMLElement) => void;
        onBeforeLeaveTransition: (el: HTMLElement) => void;
        onAfterLeaveTransition: (el: HTMLElement) => void;
        listenKeyUp: (e: KeyboardEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
        close: (...args: any[]) => void;
        cancel: (...args: any[]) => void;
        ok: (...args: any[]) => void;
        "before-open": (...args: any[]) => void;
        open: (...args: any[]) => void;
        "before-close": (...args: any[]) => void;
        "click-outside": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: boolean;
        stateful: boolean;
        title: string;
        maxWidth: string;
        size: import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">;
        sizesConfig: Record<string, any>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        closeButton: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        blur: boolean;
        zIndex: string | number;
        backgroundColor: string;
        noPadding: boolean;
        ariaCloseLabel: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        attachElement: {
            type: StringConstructor;
            default: string;
        };
        allowBodyScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableAttachment: {
            type: BooleanConstructor;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultActions: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileFullscreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        noDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOutsideDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        noEscDismiss: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxWidth: {
            type: StringConstructor;
            default: string;
        };
        maxHeight: {
            type: StringConstructor;
            default: string;
        };
        anchorClass: {
            type: StringConstructor;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">>;
            default: string;
        };
        sizesConfig: {
            type: ObjectConstructor;
            default: () => {
                defaultSize: string;
                sizes: {
                    small: number;
                    medium: number;
                    large: number;
                    auto: string;
                };
            };
        };
        fixedLayout: {
            type: BooleanConstructor;
            default: boolean;
        };
        withoutTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        overlayOpacity: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        showNestedOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
        noPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeClose: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeOk: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        beforeCancel: {
            type: import("vue").PropType<(hide: () => void) => any>;
        };
        ariaCloseLabel: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onBefore-open"?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onBefore-close"?: ((...args: any[]) => any) | undefined;
        "onClick-outside"?: ((...args: any[]) => any) | undefined;
    }, {
        show: () => void;
        hide: (cb?: (() => void) | undefined) => void;
        toggle: () => void;
        cancel: () => void;
        ok: () => void;
        onBeforeEnterTransition: (el: HTMLElement) => void;
        onAfterEnterTransition: (el: HTMLElement) => void;
        onBeforeLeaveTransition: (el: HTMLElement) => void;
        onAfterLeaveTransition: (el: HTMLElement) => void;
        listenKeyUp: (e: KeyboardEvent) => void;
    }, {}, {}, {}, {
        modelValue: boolean;
        stateful: boolean;
        title: string;
        maxWidth: string;
        size: import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">;
        sizesConfig: Record<string, any>;
        attachElement: string;
        allowBodyScroll: boolean;
        disableAttachment: boolean;
        message: string;
        okText: string;
        cancelText: string;
        hideDefaultActions: boolean;
        fullscreen: boolean;
        closeButton: boolean;
        mobileFullscreen: boolean;
        noDismiss: boolean;
        noOutsideDismiss: boolean;
        noEscDismiss: boolean;
        maxHeight: string;
        fixedLayout: boolean;
        withoutTransitions: boolean;
        overlay: boolean;
        overlayOpacity: string | number;
        showNestedOverlay: boolean;
        blur: boolean;
        zIndex: string | number;
        backgroundColor: string;
        noPadding: boolean;
        ariaCloseLabel: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    allowBodyScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileFullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    noDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOutsideDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    noEscDismiss: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxWidth: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    anchorClass: {
        type: StringConstructor;
    };
    size: {
        type: import("vue").PropType<import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">>;
        default: string;
    };
    sizesConfig: {
        type: ObjectConstructor;
        default: () => {
            defaultSize: string;
            sizes: {
                small: number;
                medium: number;
                large: number;
                auto: string;
            };
        };
    };
    fixedLayout: {
        type: BooleanConstructor;
        default: boolean;
    };
    withoutTransitions: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayOpacity: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showNestedOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    blur: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    noPadding: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeClose: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    beforeOk: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    beforeCancel: {
        type: import("vue").PropType<(hide: () => void) => any>;
    };
    ariaCloseLabel: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    "onBefore-open"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    "onBefore-close"?: ((...args: any[]) => any) | undefined;
    "onClick-outside"?: ((...args: any[]) => any) | undefined;
}, {
    show: () => void;
    hide: (cb?: (() => void) | undefined) => void;
    toggle: () => void;
    cancel: () => void;
    ok: () => void;
    onBeforeEnterTransition: (el: HTMLElement) => void;
    onAfterEnterTransition: (el: HTMLElement) => void;
    onBeforeLeaveTransition: (el: HTMLElement) => void;
    onAfterLeaveTransition: (el: HTMLElement) => void;
    listenKeyUp: (e: KeyboardEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    close: (...args: any[]) => void;
    cancel: (...args: any[]) => void;
    ok: (...args: any[]) => void;
    "before-open": (...args: any[]) => void;
    open: (...args: any[]) => void;
    "before-close": (...args: any[]) => void;
    "click-outside": (...args: any[]) => void;
}, string, {
    modelValue: boolean;
    stateful: boolean;
    title: string;
    maxWidth: string;
    size: import("../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large">;
    sizesConfig: Record<string, any>;
    attachElement: string;
    allowBodyScroll: boolean;
    disableAttachment: boolean;
    message: string;
    okText: string;
    cancelText: string;
    hideDefaultActions: boolean;
    fullscreen: boolean;
    closeButton: boolean;
    mobileFullscreen: boolean;
    noDismiss: boolean;
    noOutsideDismiss: boolean;
    noEscDismiss: boolean;
    maxHeight: string;
    fixedLayout: boolean;
    withoutTransitions: boolean;
    overlay: boolean;
    overlayOpacity: string | number;
    showNestedOverlay: boolean;
    blur: boolean;
    zIndex: string | number;
    backgroundColor: string;
    noPadding: boolean;
    ariaCloseLabel: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        anchor?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        content?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        header?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        default?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
        footer?(_: {
            show: () => void;
            hide: (cb?: (() => void) | undefined) => void;
            toggle: () => void;
            cancel: () => void;
            ok: () => void;
        }): any;
    };
});
