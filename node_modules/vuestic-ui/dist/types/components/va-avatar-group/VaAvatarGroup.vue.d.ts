import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    max: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<Record<string, unknown>[]>;
        default: () => never[];
    };
    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */
    restColor: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    onFallback: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    fallbackSrc: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackText: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackRender: {
        type: PropType<() => any>;
        required: true;
        default: (() => any) | undefined;
    };
    src: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onError: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    square: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    fontSize: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    alt: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<Record<string, unknown>[]>;
        default: () => never[];
    };
    /** If there are more avatars that can be displayed we show rest number. This prop changes color of rest indicator. */
    restColor: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    onFallback: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    fallbackSrc: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackText: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackRender: {
        type: PropType<() => any>;
        required: true;
        default: (() => any) | undefined;
    };
    src: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onError: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    square: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    fontSize: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    alt: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>>, {
    preset: string;
    color: string;
    textColor: string;
    icon: string;
    vertical: boolean;
    size: NonNullable<string | number | undefined>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    onFallback: (...args: any[]) => any;
    fallbackSrc: string;
    fallbackText: string;
    fallbackIcon: string;
    fallbackRender: () => any;
    src: string;
    onError: (...args: any[]) => any;
    square: NonNullable<boolean | undefined>;
    fontSize: string;
    alt: string;
    loading: NonNullable<boolean | undefined>;
    max: number;
    options: Record<string, unknown>[];
    restColor: string;
}, {}>, {
    rest?(_: {
        fontSize: string;
        size: string;
        preset: string;
        color: string;
        textColor: string;
        icon: string;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        src: string;
        square: NonNullable<boolean | undefined>;
        alt: string;
        loading: NonNullable<boolean | undefined>;
        onFallback?: ((...args: any[]) => any) | undefined;
        fallbackRender?: (() => any) | undefined;
        onError?: ((...args: any[]) => any) | undefined;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
