export declare const VaAvatarGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: NumberConstructor;
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<Record<string, unknown>[]>;
            default: () => never[];
        };
        restColor: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onError: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        square: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        fontSize: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        alt: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: NumberConstructor;
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<Record<string, unknown>[]>;
            default: () => never[];
        };
        restColor: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onError: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        square: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        fontSize: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        alt: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {
        preset: string;
        color: string;
        textColor: string;
        icon: string;
        vertical: boolean;
        size: NonNullable<string | number | undefined>;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        src: string;
        onError: (...args: any[]) => any;
        square: NonNullable<boolean | undefined>;
        fontSize: string;
        alt: string;
        loading: NonNullable<boolean | undefined>;
        max: number;
        options: Record<string, unknown>[];
        restColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: NumberConstructor;
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: import("vue").PropType<Record<string, unknown>[]>;
            default: () => never[];
        };
        restColor: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        textColor: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        icon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        size: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        sizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        fontSizesConfig: {
            type: import("vue").PropType<Record<string, any>>;
            required: true;
            default: Record<string, any> | undefined;
        };
        onFallback: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        fallbackSrc: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackText: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackIcon: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        fallbackRender: {
            type: import("vue").PropType<() => any>;
            required: true;
            default: (() => any) | undefined;
        };
        src: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onError: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        square: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        fontSize: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        alt: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        color: string;
        textColor: string;
        icon: string;
        vertical: boolean;
        size: NonNullable<string | number | undefined>;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        onFallback: (...args: any[]) => any;
        fallbackSrc: string;
        fallbackText: string;
        fallbackIcon: string;
        fallbackRender: () => any;
        src: string;
        onError: (...args: any[]) => any;
        square: NonNullable<boolean | undefined>;
        fontSize: string;
        alt: string;
        loading: NonNullable<boolean | undefined>;
        max: number;
        options: Record<string, unknown>[];
        restColor: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: NumberConstructor;
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: import("vue").PropType<Record<string, unknown>[]>;
        default: () => never[];
    };
    restColor: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    textColor: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    onFallback: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    fallbackSrc: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackText: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    fallbackRender: {
        type: import("vue").PropType<() => any>;
        required: true;
        default: (() => any) | undefined;
    };
    src: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    onError: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    square: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    fontSize: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    alt: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    color: string;
    textColor: string;
    icon: string;
    vertical: boolean;
    size: NonNullable<string | number | undefined>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    onFallback: (...args: any[]) => any;
    fallbackSrc: string;
    fallbackText: string;
    fallbackIcon: string;
    fallbackRender: () => any;
    src: string;
    onError: (...args: any[]) => any;
    square: NonNullable<boolean | undefined>;
    fontSize: string;
    alt: string;
    loading: NonNullable<boolean | undefined>;
    max: number;
    options: Record<string, unknown>[];
    restColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        rest?(_: {
            fontSize: string;
            size: string;
            preset: string;
            color: string;
            textColor: string;
            icon: string;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            fallbackSrc: string;
            fallbackText: string;
            fallbackIcon: string;
            src: string;
            square: NonNullable<boolean | undefined>;
            alt: string;
            loading: NonNullable<boolean | undefined>;
            onFallback?: ((...args: any[]) => any) | undefined;
            fallbackRender?: (() => any) | undefined;
            onError?: ((...args: any[]) => any) | undefined;
        }): any;
    };
});
