export declare const VaDataTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingColor: {
            type: StringConstructor;
            default: string;
        };
        noDataHtml: {
            type: StringConstructor;
            default: string;
        };
        noDataFilteredHtml: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        footerClone: {
            type: BooleanConstructor;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualTrackBy: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        grid: {
            type: BooleanConstructor;
            default: boolean;
        };
        gridColumns: {
            type: NumberConstructor;
            default: number;
        };
        wrapperSize: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        ariaSelectRowLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        modelValue: {
            type: import("vue").PropType<any[]>;
        };
        selectMode: {
            type: import("vue").PropType<import("./types").DataTableSelectMode>;
            default: string;
        };
        itemsTrackBy: {
            type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
            default: string;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        items: {
            type: import("vue").PropType<import("./types").DataTableItem[]>;
            default: () => import("./types").DataTableItem[];
        };
        perPage: {
            type: import("vue").PropType<number | undefined>;
        };
        currentPage: {
            type: import("vue").PropType<number | undefined>;
        };
        filter: {
            type: StringConstructor;
            default: string;
        };
        filterMethod: {
            type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
        };
        columns: {
            type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
            default: () => import("./types").DataTableColumnSource[];
        };
        sortingOptions: {
            type: import("vue").PropType<import("./types").DataTableSortingOptions>;
            default: () => (string | null)[];
            validator: (options: import("./types").DataTableSortingOptions) => boolean;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        sortBy: {
            type: import("vue").PropType<string | undefined>;
        };
        columnSorted: {
            type: import("vue").PropType<any>;
        };
        sortingOrder: {
            type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
        };
        disableClientSideSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        scrollTopMargin: {
            type: NumberConstructor;
            default: number;
        };
        scrollBottomMargin: {
            type: NumberConstructor;
            default: number;
        };
        rowBind: {
            type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
        };
        cellBind: {
            type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
        };
        animated: {
            type: BooleanConstructor;
            default: boolean;
        };
        "onScroll:bottom": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        bench: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        itemSize: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingColor: {
            type: StringConstructor;
            default: string;
        };
        noDataHtml: {
            type: StringConstructor;
            default: string;
        };
        noDataFilteredHtml: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        footerClone: {
            type: BooleanConstructor;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualTrackBy: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        grid: {
            type: BooleanConstructor;
            default: boolean;
        };
        gridColumns: {
            type: NumberConstructor;
            default: number;
        };
        wrapperSize: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        ariaSelectRowLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        modelValue: {
            type: import("vue").PropType<any[]>;
        };
        selectMode: {
            type: import("vue").PropType<import("./types").DataTableSelectMode>;
            default: string;
        };
        itemsTrackBy: {
            type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
            default: string;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        items: {
            type: import("vue").PropType<import("./types").DataTableItem[]>;
            default: () => import("./types").DataTableItem[];
        };
        perPage: {
            type: import("vue").PropType<number | undefined>;
        };
        currentPage: {
            type: import("vue").PropType<number | undefined>;
        };
        filter: {
            type: StringConstructor;
            default: string;
        };
        filterMethod: {
            type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
        };
        columns: {
            type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
            default: () => import("./types").DataTableColumnSource[];
        };
        sortingOptions: {
            type: import("vue").PropType<import("./types").DataTableSortingOptions>;
            default: () => (string | null)[];
            validator: (options: import("./types").DataTableSortingOptions) => boolean;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        sortBy: {
            type: import("vue").PropType<string | undefined>;
        };
        columnSorted: {
            type: import("vue").PropType<any>;
        };
        sortingOrder: {
            type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
        };
        disableClientSideSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        scrollTopMargin: {
            type: NumberConstructor;
            default: number;
        };
        scrollBottomMargin: {
            type: NumberConstructor;
            default: number;
        };
        rowBind: {
            type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
        };
        cellBind: {
            type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
        };
        animated: {
            type: BooleanConstructor;
            default: boolean;
        };
        "onScroll:bottom": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        bench: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        itemSize: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        filter: string;
        preset: string;
        items: import("./types").DataTableItem[];
        loading: boolean;
        grid: boolean;
        "onScroll:bottom": (...args: any[]) => any;
        bench: number;
        itemSize: NonNullable<string | number | undefined>;
        wrapperSize: string | number;
        selectMode: import("./types").DataTableSelectMode;
        columns: import("./types").DataTableColumnSource[];
        ariaSelectAllRowsLabel: string;
        ariaSortColumnByLabel: string;
        selectedColor: string;
        allowFooterSorting: boolean;
        stickyHeader: boolean;
        stickyFooter: boolean;
        selectable: boolean;
        hoverable: boolean;
        clickable: boolean;
        loadingColor: string;
        noDataHtml: string;
        noDataFilteredHtml: string;
        hideDefaultHeader: boolean;
        footerClone: boolean;
        striped: boolean;
        virtualScroller: boolean;
        virtualTrackBy: string | number;
        gridColumns: number;
        ariaSelectRowLabel: string;
        delay: number;
        itemsTrackBy: string | ((item: import("./types").DataTableItem) => any);
        sortingOptions: import("./types").DataTableSortingOptions;
        disableClientSideSorting: boolean;
        scrollTopMargin: number;
        scrollBottomMargin: number;
        animated: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        hoverable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        loadingColor: {
            type: StringConstructor;
            default: string;
        };
        noDataHtml: {
            type: StringConstructor;
            default: string;
        };
        noDataFilteredHtml: {
            type: StringConstructor;
            default: string;
        };
        hideDefaultHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        footerClone: {
            type: BooleanConstructor;
            default: boolean;
        };
        striped: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualScroller: {
            type: BooleanConstructor;
            default: boolean;
        };
        virtualTrackBy: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        grid: {
            type: BooleanConstructor;
            default: boolean;
        };
        gridColumns: {
            type: NumberConstructor;
            default: number;
        };
        wrapperSize: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        ariaSelectRowLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaSelectAllRowsLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSortColumnByLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        delay: {
            type: NumberConstructor;
            default: number;
            validator: (value: number) => boolean;
        };
        modelValue: {
            type: import("vue").PropType<any[]>;
        };
        selectMode: {
            type: import("vue").PropType<import("./types").DataTableSelectMode>;
            default: string;
        };
        itemsTrackBy: {
            type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
            default: string;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        items: {
            type: import("vue").PropType<import("./types").DataTableItem[]>;
            default: () => import("./types").DataTableItem[];
        };
        perPage: {
            type: import("vue").PropType<number | undefined>;
        };
        currentPage: {
            type: import("vue").PropType<number | undefined>;
        };
        filter: {
            type: StringConstructor;
            default: string;
        };
        filterMethod: {
            type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
        };
        columns: {
            type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
            default: () => import("./types").DataTableColumnSource[];
        };
        sortingOptions: {
            type: import("vue").PropType<import("./types").DataTableSortingOptions>;
            default: () => (string | null)[];
            validator: (options: import("./types").DataTableSortingOptions) => boolean;
        };
        selectedColor: {
            type: StringConstructor;
            default: string;
        };
        allowFooterSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        stickyFooter: {
            type: BooleanConstructor;
            default: boolean;
        };
        height: {
            type: import("vue").PropType<string | number | undefined>;
        };
        sortBy: {
            type: import("vue").PropType<string | undefined>;
        };
        columnSorted: {
            type: import("vue").PropType<any>;
        };
        sortingOrder: {
            type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
        };
        disableClientSideSorting: {
            type: BooleanConstructor;
            default: boolean;
        };
        scrollTopMargin: {
            type: NumberConstructor;
            default: number;
        };
        scrollBottomMargin: {
            type: NumberConstructor;
            default: number;
        };
        rowBind: {
            type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
        };
        cellBind: {
            type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
        };
        animated: {
            type: BooleanConstructor;
            default: boolean;
        };
        "onScroll:bottom": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        bench: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        itemSize: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        filter: string;
        preset: string;
        items: import("./types").DataTableItem[];
        loading: boolean;
        grid: boolean;
        "onScroll:bottom": (...args: any[]) => any;
        bench: number;
        itemSize: NonNullable<string | number | undefined>;
        wrapperSize: string | number;
        selectMode: import("./types").DataTableSelectMode;
        columns: import("./types").DataTableColumnSource[];
        ariaSelectAllRowsLabel: string;
        ariaSortColumnByLabel: string;
        selectedColor: string;
        allowFooterSorting: boolean;
        stickyHeader: boolean;
        stickyFooter: boolean;
        selectable: boolean;
        hoverable: boolean;
        clickable: boolean;
        loadingColor: string;
        noDataHtml: string;
        noDataFilteredHtml: string;
        hideDefaultHeader: boolean;
        footerClone: boolean;
        striped: boolean;
        virtualScroller: boolean;
        virtualTrackBy: string | number;
        gridColumns: number;
        ariaSelectRowLabel: string;
        delay: number;
        itemsTrackBy: string | ((item: import("./types").DataTableItem) => any);
        sortingOptions: import("./types").DataTableSortingOptions;
        disableClientSideSorting: boolean;
        scrollTopMargin: number;
        scrollBottomMargin: number;
        animated: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualTrackBy: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    grid: {
        type: BooleanConstructor;
        default: boolean;
    };
    gridColumns: {
        type: NumberConstructor;
        default: number;
    };
    wrapperSize: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    ariaSelectRowLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectAllRowsLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSortColumnByLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    delay: {
        type: NumberConstructor;
        default: number;
        validator: (value: number) => boolean;
    };
    modelValue: {
        type: import("vue").PropType<any[]>;
    };
    selectMode: {
        type: import("vue").PropType<import("./types").DataTableSelectMode>;
        default: string;
    };
    itemsTrackBy: {
        type: import("vue").PropType<string | ((item: import("./types").DataTableItem) => any)>;
        default: string;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    items: {
        type: import("vue").PropType<import("./types").DataTableItem[]>;
        default: () => import("./types").DataTableItem[];
    };
    perPage: {
        type: import("vue").PropType<number | undefined>;
    };
    currentPage: {
        type: import("vue").PropType<number | undefined>;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").DataTableFilterMethod | undefined>;
    };
    columns: {
        type: import("vue").PropType<import("./types").DataTableColumnSource[]>;
        default: () => import("./types").DataTableColumnSource[];
    };
    sortingOptions: {
        type: import("vue").PropType<import("./types").DataTableSortingOptions>;
        default: () => (string | null)[];
        validator: (options: import("./types").DataTableSortingOptions) => boolean;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number | undefined>;
    };
    sortBy: {
        type: import("vue").PropType<string | undefined>;
    };
    columnSorted: {
        type: import("vue").PropType<any>;
    };
    sortingOrder: {
        type: import("vue").PropType<import("./types").DataTableSortingOrder | undefined>;
    };
    disableClientSideSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollTopMargin: {
        type: NumberConstructor;
        default: number;
    };
    scrollBottomMargin: {
        type: NumberConstructor;
        default: number;
    };
    rowBind: {
        type: import("vue").PropType<import("./types").DataTableRowBind | undefined>;
    };
    cellBind: {
        type: import("vue").PropType<import("./types").DataTableCellBind | undefined>;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    "onScroll:bottom": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    bench: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    itemSize: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    filter: string;
    preset: string;
    items: import("./types").DataTableItem[];
    loading: boolean;
    grid: boolean;
    "onScroll:bottom": (...args: any[]) => any;
    bench: number;
    itemSize: NonNullable<string | number | undefined>;
    wrapperSize: string | number;
    selectMode: import("./types").DataTableSelectMode;
    columns: import("./types").DataTableColumnSource[];
    ariaSelectAllRowsLabel: string;
    ariaSortColumnByLabel: string;
    selectedColor: string;
    allowFooterSorting: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    selectable: boolean;
    hoverable: boolean;
    clickable: boolean;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    striped: boolean;
    virtualScroller: boolean;
    virtualTrackBy: string | number;
    gridColumns: number;
    ariaSelectRowLabel: string;
    delay: number;
    itemsTrackBy: string | ((item: import("./types").DataTableItem) => any);
    sortingOptions: import("./types").DataTableSortingOptions;
    disableClientSideSorting: boolean;
    scrollTopMargin: number;
    scrollBottomMargin: number;
    animated: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<`cell(${string})`, (_: {
        row: import("./types").DataTableRow;
        isExpanded: boolean;
        rowIndex: number;
        rowKey: any;
        rowData: import("./types").DataTableItem;
        column: import("./types").DataTableColumnInternal;
        source: any;
        value: string;
    }) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & {
        colgroup?(_: {
            [x: number]: import("./types").DataTableColumnInternal;
            length: number;
            toString(): string;
            toLocaleString(): string;
            pop(): import("./types").DataTableColumnInternal | undefined;
            push(...items: import("./types").DataTableColumnInternal[]): number;
            concat(...items: ConcatArray<import("./types").DataTableColumnInternal>[]): import("./types").DataTableColumnInternal[];
            concat(...items: (import("./types").DataTableColumnInternal | ConcatArray<import("./types").DataTableColumnInternal>)[]): import("./types").DataTableColumnInternal[];
            join(separator?: string | undefined): string;
            reverse(): import("./types").DataTableColumnInternal[];
            shift(): import("./types").DataTableColumnInternal | undefined;
            slice(start?: number | undefined, end?: number | undefined): import("./types").DataTableColumnInternal[];
            sort(compareFn?: ((a: import("./types").DataTableColumnInternal, b: import("./types").DataTableColumnInternal) => number) | undefined): import("./types").DataTableColumnInternal[];
            splice(start: number, deleteCount?: number | undefined): import("./types").DataTableColumnInternal[];
            splice(start: number, deleteCount: number, ...items: import("./types").DataTableColumnInternal[]): import("./types").DataTableColumnInternal[];
            unshift(...items: import("./types").DataTableColumnInternal[]): number;
            indexOf(searchElement: import("./types").DataTableColumnInternal, fromIndex?: number | undefined): number;
            lastIndexOf(searchElement: import("./types").DataTableColumnInternal, fromIndex?: number | undefined): number;
            every<S extends import("./types").DataTableColumnInternal>(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => value is S, thisArg?: any): this is S[];
            every(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): boolean;
            some(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): boolean;
            forEach(callbackfn: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => void, thisArg?: any): void;
            map<U>(callbackfn: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => U, thisArg?: any): U[];
            filter<S_1 extends import("./types").DataTableColumnInternal>(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => value is S_1, thisArg?: any): S_1[];
            filter(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): import("./types").DataTableColumnInternal[];
            reduce(callbackfn: (previousValue: import("./types").DataTableColumnInternal, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => import("./types").DataTableColumnInternal): import("./types").DataTableColumnInternal;
            reduce(callbackfn: (previousValue: import("./types").DataTableColumnInternal, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => import("./types").DataTableColumnInternal, initialValue: import("./types").DataTableColumnInternal): import("./types").DataTableColumnInternal;
            reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => U_1, initialValue: U_1): U_1;
            reduceRight(callbackfn: (previousValue: import("./types").DataTableColumnInternal, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => import("./types").DataTableColumnInternal): import("./types").DataTableColumnInternal;
            reduceRight(callbackfn: (previousValue: import("./types").DataTableColumnInternal, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => import("./types").DataTableColumnInternal, initialValue: import("./types").DataTableColumnInternal): import("./types").DataTableColumnInternal;
            reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("./types").DataTableColumnInternal, currentIndex: number, array: import("./types").DataTableColumnInternal[]) => U_2, initialValue: U_2): U_2;
            find<S_2 extends import("./types").DataTableColumnInternal>(predicate: (value: import("./types").DataTableColumnInternal, index: number, obj: import("./types").DataTableColumnInternal[]) => value is S_2, thisArg?: any): S_2 | undefined;
            find(predicate: (value: import("./types").DataTableColumnInternal, index: number, obj: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): import("./types").DataTableColumnInternal | undefined;
            findIndex(predicate: (value: import("./types").DataTableColumnInternal, index: number, obj: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): number;
            fill(value: import("./types").DataTableColumnInternal, start?: number | undefined, end?: number | undefined): import("./types").DataTableColumnInternal[];
            copyWithin(target: number, start: number, end?: number | undefined): import("./types").DataTableColumnInternal[];
            entries(): IterableIterator<[number, import("./types").DataTableColumnInternal]>;
            keys(): IterableIterator<number>;
            values(): IterableIterator<import("./types").DataTableColumnInternal>;
            includes(searchElement: import("./types").DataTableColumnInternal, fromIndex?: number | undefined): boolean;
            flatMap<U_3, This = undefined>(callback: (this: This, value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
            flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
            at(index: number): import("./types").DataTableColumnInternal | undefined;
            findLast<S_3 extends import("./types").DataTableColumnInternal>(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => value is S_3, thisArg?: any): S_3 | undefined;
            findLast(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): import("./types").DataTableColumnInternal | undefined;
            findLastIndex(predicate: (value: import("./types").DataTableColumnInternal, index: number, array: import("./types").DataTableColumnInternal[]) => unknown, thisArg?: any): number;
            [Symbol.iterator](): IterableIterator<import("./types").DataTableColumnInternal>;
            [Symbol.unscopables]: {
                [x: number]: boolean | undefined;
                length?: boolean | undefined;
                toString?: boolean | undefined;
                toLocaleString?: boolean | undefined;
                pop?: boolean | undefined;
                push?: boolean | undefined;
                concat?: boolean | undefined;
                join?: boolean | undefined;
                reverse?: boolean | undefined;
                shift?: boolean | undefined;
                slice?: boolean | undefined;
                sort?: boolean | undefined;
                splice?: boolean | undefined;
                unshift?: boolean | undefined;
                indexOf?: boolean | undefined;
                lastIndexOf?: boolean | undefined;
                every?: boolean | undefined;
                some?: boolean | undefined;
                forEach?: boolean | undefined;
                map?: boolean | undefined;
                filter?: boolean | undefined;
                reduce?: boolean | undefined;
                reduceRight?: boolean | undefined;
                find?: boolean | undefined;
                findIndex?: boolean | undefined;
                fill?: boolean | undefined;
                copyWithin?: boolean | undefined;
                entries?: boolean | undefined;
                keys?: boolean | undefined;
                values?: boolean | undefined;
                includes?: boolean | undefined;
                flatMap?: boolean | undefined;
                flat?: boolean | undefined;
                at?: boolean | undefined;
                findLast?: boolean | undefined;
                findLastIndex?: boolean | undefined;
                [Symbol.iterator]?: boolean | undefined;
                readonly [Symbol.unscopables]?: boolean | undefined;
            };
        }): any;
        headerPrepend?(_: {}): any;
        header?(_: {}): any;
        headerAppend?(_: {}): any;
        bodyPrepend?(_: {}): any;
        cell?(_: {
            cell: import("./types").DataTableCell;
            row: import("./types").DataTableRow;
        }): any;
        expandableRow?(_: {
            initialIndex: number;
            itemKey: any;
            source: import("./types").DataTableItem;
            cells: import("./types").DataTableCell[];
            rowData: import("./types").DataTableItem;
            toggleRowDetails: (show?: boolean | undefined) => void;
            isExpandableRowVisible: boolean;
        }): any;
        bodyAppend?(_: {}): any;
        footerPrepend?(_: {}): any;
        footer?(_: {}): any;
        footerAppend?(_: {}): any;
    };
});
export * from './types';
export * from './fabrics';
