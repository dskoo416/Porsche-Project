export declare const VaSwitch: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
            default: boolean;
        };
        trueLabel: {
            type: StringConstructor;
            default: null;
        };
        falseLabel: {
            type: StringConstructor;
            default: null;
        };
        trueInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        falseInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        offColor: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        arrayValue: {
            type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
            default: null;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        trueValue: {
            type: null;
            default: boolean;
        };
        falseValue: {
            type: null;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminateValue: {
            type: import("vue").PropType<unknown>;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        focus: () => void;
        reset: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
            default: boolean;
        };
        trueLabel: {
            type: StringConstructor;
            default: null;
        };
        falseLabel: {
            type: StringConstructor;
            default: null;
        };
        trueInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        falseInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        offColor: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        arrayValue: {
            type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
            default: null;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        trueValue: {
            type: null;
            default: boolean;
        };
        falseValue: {
            type: null;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminateValue: {
            type: import("vue").PropType<unknown>;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        preset: string;
        modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
        stateful: boolean;
        color: string;
        name: string;
        size: "small" | "medium" | "large";
        success: boolean;
        error: boolean;
        loading: boolean;
        ariaLabel: string;
        disabled: boolean;
        label: string;
        readonly: boolean;
        indeterminate: boolean;
        indeterminateValue: null;
        id: string;
        arrayValue: string | number | boolean | Record<string, any>;
        leftLabel: boolean;
        trueValue: any;
        falseValue: any;
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<any>[];
        messages: string | string[];
        immediateValidation: boolean;
        trueLabel: string;
        falseLabel: string;
        trueInnerLabel: string;
        falseInnerLabel: string;
        offColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
            default: boolean;
        };
        trueLabel: {
            type: StringConstructor;
            default: null;
        };
        falseLabel: {
            type: StringConstructor;
            default: null;
        };
        trueInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        falseInnerLabel: {
            type: StringConstructor;
            default: null;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        offColor: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        arrayValue: {
            type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
            default: null;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        leftLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        trueValue: {
            type: null;
            default: boolean;
        };
        falseValue: {
            type: null;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminateValue: {
            type: import("vue").PropType<unknown>;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            default: () => any;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        focus: () => void;
        reset: () => void;
    }, {}, {}, {}, {
        preset: string;
        modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
        stateful: boolean;
        color: string;
        name: string;
        size: "small" | "medium" | "large";
        success: boolean;
        error: boolean;
        loading: boolean;
        ariaLabel: string;
        disabled: boolean;
        label: string;
        readonly: boolean;
        indeterminate: boolean;
        indeterminateValue: null;
        id: string;
        arrayValue: string | number | boolean | Record<string, any>;
        leftLabel: boolean;
        trueValue: any;
        falseValue: any;
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        rules: import("../../composables").ValidationRule<any>[];
        messages: string | string[];
        immediateValidation: boolean;
        trueLabel: string;
        falseLabel: string;
        trueInnerLabel: string;
        falseInnerLabel: string;
        offColor: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: boolean;
    };
    trueLabel: {
        type: StringConstructor;
        default: null;
    };
    falseLabel: {
        type: StringConstructor;
        default: null;
    };
    trueInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    falseInnerLabel: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    offColor: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: null;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: null;
        default: boolean;
    };
    falseValue: {
        type: null;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: import("vue").PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>>, {
    focus: () => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    preset: string;
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    stateful: boolean;
    color: string;
    name: string;
    size: "small" | "medium" | "large";
    success: boolean;
    error: boolean;
    loading: boolean;
    ariaLabel: string;
    disabled: boolean;
    label: string;
    readonly: boolean;
    indeterminate: boolean;
    indeterminateValue: null;
    id: string;
    arrayValue: string | number | boolean | Record<string, any>;
    leftLabel: boolean;
    trueValue: any;
    falseValue: any;
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<any>[];
    messages: string | string[];
    immediateValidation: boolean;
    trueLabel: string;
    falseLabel: string;
    trueInnerLabel: string;
    falseInnerLabel: string;
    offColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        innerLabel?(_: {}): any;
        checker?(_: {
            value: boolean;
        }): any;
        default?(_: {}): any;
    };
});
