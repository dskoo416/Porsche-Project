export declare const VaDivider: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        dashed: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        orientation: {
            type: import("vue").PropType<"left" | "center" | "right">;
            default: string;
            validator: (value: string) => boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        dashed: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        orientation: {
            type: import("vue").PropType<"left" | "center" | "right">;
            default: string;
            validator: (value: string) => boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        preset: string;
        inset: boolean;
        color: string;
        vertical: boolean;
        dashed: boolean;
        orientation: "left" | "center" | "right";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        dashed: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        orientation: {
            type: import("vue").PropType<"left" | "center" | "right">;
            default: string;
            validator: (value: string) => boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        inset: boolean;
        color: string;
        vertical: boolean;
        dashed: boolean;
        orientation: "left" | "center" | "right";
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    dashed: {
        type: BooleanConstructor;
        default: boolean;
    };
    inset: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientation: {
        type: import("vue").PropType<"left" | "center" | "right">;
        default: string;
        validator: (value: string) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    inset: boolean;
    color: string;
    vertical: boolean;
    dashed: boolean;
    orientation: "left" | "center" | "right";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
