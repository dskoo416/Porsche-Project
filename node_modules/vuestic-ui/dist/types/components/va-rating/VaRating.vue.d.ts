import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    texts: {
        type: PropType<string[]>;
        default: () => never[];
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaItemLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hover: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    tabindex: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    unselectedColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onHover: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    halfIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    emptyIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    texts: {
        type: PropType<string[]>;
        default: () => never[];
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaItemLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    size: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hover: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    tabindex: {
        type: PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    unselectedColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    onHover: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    halfIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    emptyIcon: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any> | undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: number;
    stateful: boolean;
    color: string;
    icon: string;
    size: NonNullable<string | number | undefined>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    max: number;
    ariaLabel: string;
    disabled: NonNullable<boolean | undefined>;
    hover: NonNullable<boolean | undefined>;
    readonly: NonNullable<boolean | undefined>;
    onClick: (...args: any[]) => any;
    tabindex: NonNullable<string | number | undefined>;
    clearable: boolean;
    unselectedColor: string;
    onHover: (...args: any[]) => any;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
    numbers: boolean;
    texts: string[];
    ariaItemLabel: string;
}, {}>, {
    item?(_: {
        value: number;
        onClick: () => void;
        index: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
