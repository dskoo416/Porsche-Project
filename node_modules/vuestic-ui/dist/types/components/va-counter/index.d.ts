export declare const VaCounter: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        min: {
            type: NumberConstructor;
        };
        max: {
            type: NumberConstructor;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        increaseIcon: {
            type: StringConstructor;
            default: string;
        };
        decreaseIcon: {
            type: StringConstructor;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        margins: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        longPressDelay: {
            type: NumberConstructor;
            default: number;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaDecreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaIncreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        name: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        success: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        error: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        dirty: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        errorMessages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        errorCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            required: true;
            default: import("../../composables").ValidationRule<any>[] | undefined;
        };
        messages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        immediateValidation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        maxLength: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        focus: () => void;
        blur: () => void;
        decreaseCount: () => void;
        increaseCount: () => void;
        reset: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        min: {
            type: NumberConstructor;
        };
        max: {
            type: NumberConstructor;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        increaseIcon: {
            type: StringConstructor;
            default: string;
        };
        decreaseIcon: {
            type: StringConstructor;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        margins: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        longPressDelay: {
            type: NumberConstructor;
            default: number;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaDecreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaIncreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        name: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        success: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        error: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        dirty: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        errorMessages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        errorCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            required: true;
            default: import("../../composables").ValidationRule<any>[] | undefined;
        };
        messages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        immediateValidation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        maxLength: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        flat: boolean;
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: string | number;
        stateful: boolean;
        color: string;
        name: string;
        success: NonNullable<boolean | undefined>;
        error: NonNullable<boolean | undefined>;
        loading: NonNullable<boolean | undefined>;
        ariaLabel: string;
        disabled: NonNullable<boolean | undefined>;
        label: string;
        readonly: NonNullable<boolean | undefined>;
        dirty: NonNullable<boolean | undefined>;
        errorMessages: NonNullable<string | string[] | undefined>;
        errorCount: NonNullable<string | number | undefined>;
        rules: import("../../composables").ValidationRule<any>[];
        messages: NonNullable<string | string[] | undefined>;
        immediateValidation: NonNullable<boolean | undefined>;
        requiredMark: NonNullable<boolean | undefined>;
        onClick: (...args: any[]) => any;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: NonNullable<boolean | undefined>;
        maxLength: number;
        placeholder: string;
        background: string;
        innerLabel: NonNullable<boolean | undefined>;
        inputAriaLabel: string;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
        step: number;
        manualInput: boolean;
        increaseIcon: string;
        decreaseIcon: string;
        buttons: boolean;
        rounded: boolean;
        margins: string | number;
        longPressDelay: number;
        ariaDecreaseLabel: string;
        ariaIncreaseLabel: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        manualInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        min: {
            type: NumberConstructor;
        };
        max: {
            type: NumberConstructor;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        increaseIcon: {
            type: StringConstructor;
            default: string;
        };
        decreaseIcon: {
            type: StringConstructor;
            default: string;
        };
        buttons: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        margins: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        longPressDelay: {
            type: NumberConstructor;
            default: number;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaDecreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        ariaIncreaseLabel: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        name: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        success: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        error: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        dirty: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        errorMessages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        errorCount: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        rules: {
            type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
            required: true;
            default: import("../../composables").ValidationRule<any>[] | undefined;
        };
        messages: {
            type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
            required: true;
            default: string | string[] | undefined;
        };
        immediateValidation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        counter: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        maxLength: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>>, {
        focus: () => void;
        blur: () => void;
        decreaseCount: () => void;
        increaseCount: () => void;
        reset: () => void;
    }, {}, {}, {}, {
        flat: boolean;
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: string | number;
        stateful: boolean;
        color: string;
        name: string;
        success: NonNullable<boolean | undefined>;
        error: NonNullable<boolean | undefined>;
        loading: NonNullable<boolean | undefined>;
        ariaLabel: string;
        disabled: NonNullable<boolean | undefined>;
        label: string;
        readonly: NonNullable<boolean | undefined>;
        dirty: NonNullable<boolean | undefined>;
        errorMessages: NonNullable<string | string[] | undefined>;
        errorCount: NonNullable<string | number | undefined>;
        rules: import("../../composables").ValidationRule<any>[];
        messages: NonNullable<string | string[] | undefined>;
        immediateValidation: NonNullable<boolean | undefined>;
        requiredMark: NonNullable<boolean | undefined>;
        onClick: (...args: any[]) => any;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: NonNullable<boolean | undefined>;
        maxLength: number;
        placeholder: string;
        background: string;
        innerLabel: NonNullable<boolean | undefined>;
        inputAriaLabel: string;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
        step: number;
        manualInput: boolean;
        increaseIcon: string;
        decreaseIcon: string;
        buttons: boolean;
        rounded: boolean;
        margins: string | number;
        longPressDelay: number;
        ariaDecreaseLabel: string;
        ariaIncreaseLabel: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
    };
    max: {
        type: NumberConstructor;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    increaseIcon: {
        type: StringConstructor;
        default: string;
    };
    decreaseIcon: {
        type: StringConstructor;
        default: string;
    };
    buttons: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    margins: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    longPressDelay: {
        type: NumberConstructor;
        default: number;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaDecreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaIncreaseLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    name: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    success: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    error: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    disabled: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    dirty: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    errorMessages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    errorCount: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    rules: {
        type: import("vue").PropType<import("../../composables").ValidationRule<any>[]>;
        required: true;
        default: import("../../composables").ValidationRule<any>[] | undefined;
    };
    messages: {
        type: import("vue").PropType<NonNullable<string | string[] | undefined>>;
        required: true;
        default: string | string[] | undefined;
    };
    immediateValidation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    requiredMark: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    maxLength: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaLabelledby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>>, {
    focus: () => void;
    blur: () => void;
    decreaseCount: () => void;
    increaseCount: () => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    flat: boolean;
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: string | number;
    stateful: boolean;
    color: string;
    name: string;
    success: NonNullable<boolean | undefined>;
    error: NonNullable<boolean | undefined>;
    loading: NonNullable<boolean | undefined>;
    ariaLabel: string;
    disabled: NonNullable<boolean | undefined>;
    label: string;
    readonly: NonNullable<boolean | undefined>;
    dirty: NonNullable<boolean | undefined>;
    errorMessages: NonNullable<string | string[] | undefined>;
    errorCount: NonNullable<string | number | undefined>;
    rules: import("../../composables").ValidationRule<any>[];
    messages: NonNullable<string | string[] | undefined>;
    immediateValidation: NonNullable<boolean | undefined>;
    requiredMark: NonNullable<boolean | undefined>;
    onClick: (...args: any[]) => any;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: NonNullable<boolean | undefined>;
    maxLength: number;
    placeholder: string;
    background: string;
    innerLabel: NonNullable<boolean | undefined>;
    inputAriaLabel: string;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    step: number;
    manualInput: boolean;
    increaseIcon: string;
    decreaseIcon: string;
    buttons: boolean;
    rounded: boolean;
    margins: string | number;
    longPressDelay: number;
    ariaDecreaseLabel: string;
    ariaIncreaseLabel: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        decreaseAction?(_: any): any;
        increaseAction?(_: any): any;
        content?(_: any): any;
    };
});
