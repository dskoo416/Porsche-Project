import { PropType } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<number | number[]>;
        default: number;
    };
    trackLabel: {
        type: PropType<string | ((val: number, order?: number | undefined) => string) | undefined>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
    labelColor: {
        type: StringConstructor;
        default: string;
    };
    trackLabelVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    invertLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pins: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPrepend: {
        type: StringConstructor;
        default: string;
    };
    iconAppend: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTrack: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    change: (...args: any[]) => void;
    "drag-start": (...args: any[]) => void;
    "drag-end": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<number | number[]>;
        default: number;
    };
    trackLabel: {
        type: PropType<string | ((val: number, order?: number | undefined) => string) | undefined>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
    labelColor: {
        type: StringConstructor;
        default: string;
    };
    trackLabelVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    invertLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pins: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPrepend: {
        type: StringConstructor;
        default: string;
    };
    iconAppend: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTrack: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onDrag-start"?: ((...args: any[]) => any) | undefined;
    "onDrag-end"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    modelValue: number | number[];
    stateful: boolean;
    color: string;
    vertical: boolean;
    max: number;
    ariaLabel: string;
    disabled: boolean;
    label: string;
    readonly: boolean;
    min: number;
    step: number;
    range: boolean;
    trackColor: string;
    labelColor: string;
    trackLabelVisible: boolean;
    invertLabel: boolean;
    pins: boolean;
    iconPrepend: string;
    iconAppend: string;
    showTrack: boolean;
}, {}>, Partial<Record<NonNullable<"append" | "prepend">, (_: {}) => any>> & Partial<Record<NonNullable<"append" | "prepend">, (_: {}) => any>> & {
    label?(_: {}): any;
    trackLabel?(_: {
        value: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
