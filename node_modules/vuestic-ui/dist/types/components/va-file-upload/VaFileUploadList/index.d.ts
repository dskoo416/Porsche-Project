export declare const VaFileUploadList: import("vue").DefineComponent<{
    file: {
        type: import("vue").PropType<import("..").ConvertedFile>;
        required: true;
        default: import("..").ConvertedFile | null | undefined;
    };
    onRemove: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaRemoveFileLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    files: {
        type: import("vue").PropType<import("..").VaFile[]>;
        default: null;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    remove: (...args: any[]) => void;
    removeSingle: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    file: {
        type: import("vue").PropType<import("..").ConvertedFile>;
        required: true;
        default: import("..").ConvertedFile | null | undefined;
    };
    onRemove: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaRemoveFileLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    files: {
        type: import("vue").PropType<import("..").VaFile[]>;
        default: null;
    };
}>> & {
    onRemove?: ((...args: any[]) => any) | undefined;
    onRemoveSingle?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    color: string;
    file: import("..").ConvertedFile;
    onRemove: (...args: any[]) => any;
    ariaRemoveFileLabel: string;
    files: import("..").VaFile[];
}, {}>;
