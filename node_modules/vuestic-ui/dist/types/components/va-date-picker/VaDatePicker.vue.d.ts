import { PropType } from 'vue';
import { DatePickerModelValue, DatePickerType, DatePickerView } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    mode: {
        type: PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
        required: true;
        default: import("./types").DatePickerMode | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
        required: true;
        default: "Monday" | "Sunday" | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    focus: () => any;
    focusCurrentPicker: () => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "update:view": (...args: any[]) => void;
    "hover:day": (...args: any[]) => void;
    "click:day": (...args: any[]) => void;
    "hover:month": (...args: any[]) => void;
    "click:month": (...args: any[]) => void;
    "hover:year": (...args: any[]) => void;
    "click:year": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    mode: {
        type: PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
        required: true;
        default: import("./types").DatePickerMode | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
        required: true;
        default: "Monday" | "Sunday" | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    stateful: boolean;
    type: DatePickerType;
    color: string;
    mode: NonNullable<import("./types").DatePickerMode | undefined>;
    disabled: boolean;
    readonly: boolean;
    "onUpdate:view": (...args: any[]) => any;
    monthNames: string[];
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
    "onHover:day": (...args: any[]) => any;
    "onClick:day": (...args: any[]) => any;
    weekdayNames: string[];
    firstWeekday: NonNullable<"Monday" | "Sunday" | undefined>;
    hideWeekDays: NonNullable<boolean | undefined>;
    showOtherMonths: NonNullable<boolean | undefined>;
    allowedDays: (date: Date) => boolean;
    weekends: (date: Date) => boolean;
    highlightWeekend: NonNullable<boolean | undefined>;
    highlightToday: NonNullable<boolean | undefined>;
    "onHover:month": (...args: any[]) => any;
    "onClick:month": (...args: any[]) => any;
    allowedMonths: (date: Date) => boolean;
    "onHover:year": (...args: any[]) => any;
    "onClick:year": (...args: any[]) => any;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
    weekendsColor: string;
}, {}>, Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
