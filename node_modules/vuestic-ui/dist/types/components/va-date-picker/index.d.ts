export declare const VaDatePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<import("./types").DatePickerView>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        endYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
            required: true;
            default: "Monday" | "Sunday" | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => any;
        focusCurrentPicker: () => any;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
        "update:view": (...args: any[]) => void;
        "hover:day": (...args: any[]) => void;
        "click:day": (...args: any[]) => void;
        "hover:month": (...args: any[]) => void;
        "click:month": (...args: any[]) => void;
        "hover:year": (...args: any[]) => void;
        "click:year": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<import("./types").DatePickerView>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        endYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
            required: true;
            default: "Monday" | "Sunday" | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        stateful: boolean;
        type: import("./types").DatePickerType;
        color: string;
        mode: NonNullable<import("./types").DatePickerMode | undefined>;
        disabled: boolean;
        readonly: boolean;
        "onUpdate:view": (...args: any[]) => any;
        monthNames: string[];
        ariaNextPeriodLabel: string;
        ariaPreviousPeriodLabel: string;
        ariaSwitchViewLabel: string;
        "onHover:day": (...args: any[]) => any;
        "onClick:day": (...args: any[]) => any;
        weekdayNames: string[];
        firstWeekday: NonNullable<"Monday" | "Sunday" | undefined>;
        hideWeekDays: NonNullable<boolean | undefined>;
        showOtherMonths: NonNullable<boolean | undefined>;
        allowedDays: (date: Date) => boolean;
        weekends: (date: Date) => boolean;
        highlightWeekend: NonNullable<boolean | undefined>;
        highlightToday: NonNullable<boolean | undefined>;
        "onHover:month": (...args: any[]) => any;
        "onClick:month": (...args: any[]) => any;
        allowedMonths: (date: Date) => boolean;
        "onHover:year": (...args: any[]) => any;
        "onClick:year": (...args: any[]) => any;
        allowedYears: (date: Date) => boolean;
        startYear: number;
        endYear: number;
        weekendsColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<import("./types").DatePickerModelValue>;
        };
        monthNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        view: {
            type: import("vue").PropType<import("./types").DatePickerView>;
        };
        type: {
            type: import("vue").PropType<import("./types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        mode: {
            type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
            required: true;
            default: import("./types").DatePickerMode | undefined;
        };
        highlightToday: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onHover:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:year": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedYears: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        startYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        endYear: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        "onHover:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:month": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        allowedMonths: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        "onHover:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick:day": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        firstWeekday: {
            type: import("vue").PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
            required: true;
            default: "Monday" | "Sunday" | undefined;
        };
        hideWeekDays: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        showOtherMonths: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        allowedDays: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        weekends: {
            type: import("vue").PropType<(date: Date) => boolean>;
            required: true;
            default: ((date: Date) => boolean) | undefined;
        };
        highlightWeekend: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onUpdate:view": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaNextPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaPreviousPeriodLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        ariaSwitchViewLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        focus: () => any;
        focusCurrentPicker: () => any;
    }, {}, {}, {}, {
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        stateful: boolean;
        type: import("./types").DatePickerType;
        color: string;
        mode: NonNullable<import("./types").DatePickerMode | undefined>;
        disabled: boolean;
        readonly: boolean;
        "onUpdate:view": (...args: any[]) => any;
        monthNames: string[];
        ariaNextPeriodLabel: string;
        ariaPreviousPeriodLabel: string;
        ariaSwitchViewLabel: string;
        "onHover:day": (...args: any[]) => any;
        "onClick:day": (...args: any[]) => any;
        weekdayNames: string[];
        firstWeekday: NonNullable<"Monday" | "Sunday" | undefined>;
        hideWeekDays: NonNullable<boolean | undefined>;
        showOtherMonths: NonNullable<boolean | undefined>;
        allowedDays: (date: Date) => boolean;
        weekends: (date: Date) => boolean;
        highlightWeekend: NonNullable<boolean | undefined>;
        highlightToday: NonNullable<boolean | undefined>;
        "onHover:month": (...args: any[]) => any;
        "onClick:month": (...args: any[]) => any;
        allowedMonths: (date: Date) => boolean;
        "onHover:year": (...args: any[]) => any;
        "onClick:year": (...args: any[]) => any;
        allowedYears: (date: Date) => boolean;
        startYear: number;
        endYear: number;
        weekendsColor: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<import("./types").DatePickerModelValue>;
    };
    monthNames: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    view: {
        type: import("vue").PropType<import("./types").DatePickerView>;
    };
    type: {
        type: import("vue").PropType<import("./types").DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    mode: {
        type: import("vue").PropType<NonNullable<import("./types").DatePickerMode | undefined>>;
        required: true;
        default: import("./types").DatePickerMode | undefined;
    };
    highlightToday: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onHover:year": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    endYear: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    "onHover:month": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:day": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    firstWeekday: {
        type: import("vue").PropType<NonNullable<"Monday" | "Sunday" | undefined>>;
        required: true;
        default: "Monday" | "Sunday" | undefined;
    };
    hideWeekDays: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    showOtherMonths: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    allowedDays: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: import("vue").PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onUpdate:view": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaNextPeriodLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSwitchViewLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    focus: () => any;
    focusCurrentPicker: () => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "update:view": (...args: any[]) => void;
    "hover:day": (...args: any[]) => void;
    "click:day": (...args: any[]) => void;
    "hover:month": (...args: any[]) => void;
    "click:month": (...args: any[]) => void;
    "hover:year": (...args: any[]) => void;
    "click:year": (...args: any[]) => void;
}, string, {
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    stateful: boolean;
    type: import("./types").DatePickerType;
    color: string;
    mode: NonNullable<import("./types").DatePickerMode | undefined>;
    disabled: boolean;
    readonly: boolean;
    "onUpdate:view": (...args: any[]) => any;
    monthNames: string[];
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
    "onHover:day": (...args: any[]) => any;
    "onClick:day": (...args: any[]) => any;
    weekdayNames: string[];
    firstWeekday: NonNullable<"Monday" | "Sunday" | undefined>;
    hideWeekDays: NonNullable<boolean | undefined>;
    showOtherMonths: NonNullable<boolean | undefined>;
    allowedDays: (date: Date) => boolean;
    weekends: (date: Date) => boolean;
    highlightWeekend: NonNullable<boolean | undefined>;
    highlightToday: NonNullable<boolean | undefined>;
    "onHover:month": (...args: any[]) => any;
    "onClick:month": (...args: any[]) => any;
    allowedMonths: (date: Date) => boolean;
    "onHover:year": (...args: any[]) => any;
    "onClick:year": (...args: any[]) => any;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
    weekendsColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>>;
});
