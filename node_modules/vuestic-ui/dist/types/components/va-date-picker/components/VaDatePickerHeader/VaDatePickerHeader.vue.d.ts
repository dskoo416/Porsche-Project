import { PropType } from 'vue';
import { DatePickerView } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    monthNames: {
        type: ArrayConstructor;
        required: true;
    };
    view: {
        type: PropType<DatePickerView>;
    };
    color: {
        type: StringConstructor;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:view": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    monthNames: {
        type: ArrayConstructor;
        required: true;
    };
    view: {
        type: PropType<DatePickerView>;
    };
    color: {
        type: StringConstructor;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaNextPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaPreviousPeriodLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSwitchViewLabel: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
}, {}>, {
    buttonPrev?(_: {
        onClick: () => void;
    }): any;
    header?(_: {
        year: number;
        month: number;
        monthNames: unknown[];
        view: DatePickerView;
        changeView: (view: DatePickerView) => void;
        switchView: () => void;
    }): any;
    year?(_: {
        year: number;
    }): any;
    month?(_: {
        month: number;
    }): any;
    buttonNext?(_: {
        onClick: () => void;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
