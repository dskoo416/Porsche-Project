import { PropType } from 'vue';
import { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: PropType<DatePickerMode>;
        default: string;
    };
    view: {
        type: PropType<DatePickerView>;
        default: () => {
            type: string;
        };
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "hover:year": (...args: any[]) => void;
    "click:year": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    startYear: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: PropType<DatePickerMode>;
        default: string;
    };
    view: {
        type: PropType<DatePickerView>;
        default: () => {
            type: string;
        };
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    mode: DatePickerMode;
    readonly: boolean;
    view: DatePickerView;
    highlightToday: boolean;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
}, {}>;
export default _default;
