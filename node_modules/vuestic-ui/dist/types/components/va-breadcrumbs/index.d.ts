export declare const VaBreadcrumbsItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {
        target: string;
        tag: string;
        replace: boolean;
        disabled: boolean;
        label: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<string | Record<string, any>>;
            default: undefined;
        };
        replace: {
            type: BooleanConstructor;
            default: undefined;
        };
        append: {
            type: BooleanConstructor;
            default: undefined;
        };
        exact: {
            type: BooleanConstructor;
            default: undefined;
        };
        activeClass: {
            type: StringConstructor;
            default: undefined;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: undefined;
        };
        href: {
            type: StringConstructor;
            default: undefined;
        };
        target: {
            type: StringConstructor;
            default: undefined;
        };
    }>>, {}, {}, {}, {}, {
        target: string;
        tag: string;
        replace: boolean;
        disabled: boolean;
        label: string;
        to: string | Record<string, any>;
        append: boolean;
        exact: boolean;
        activeClass: string;
        exactActiveClass: string;
        href: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: undefined;
    };
    replace: {
        type: BooleanConstructor;
        default: undefined;
    };
    append: {
        type: BooleanConstructor;
        default: undefined;
    };
    exact: {
        type: BooleanConstructor;
        default: undefined;
    };
    activeClass: {
        type: StringConstructor;
        default: undefined;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: undefined;
    };
    href: {
        type: StringConstructor;
        default: undefined;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    target: string;
    tag: string;
    replace: boolean;
    disabled: boolean;
    label: string;
    to: string | Record<string, any>;
    append: boolean;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const VaBreadcrumbs: import("vue").DefineComponent<{
    separator: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: null;
    };
    disabledColor: {
        type: StringConstructor;
        default: string;
    };
    activeColor: {
        type: StringConstructor;
        default: null;
    };
    separatorColor: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    separator: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: null;
    };
    disabledColor: {
        type: StringConstructor;
        default: string;
    };
    activeColor: {
        type: StringConstructor;
        default: null;
    };
    separatorColor: {
        type: StringConstructor;
        default: null;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    preset: string;
    color: string;
    vertical: boolean;
    ariaLabel: string;
    separator: string;
    disabledColor: string;
    activeColor: string;
    separatorColor: string;
    align: string;
}, {}>;
