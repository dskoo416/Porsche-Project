import { PropType } from 'vue';
import type { DateInputModelValue, DateInputValue } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
        required: true;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    /** Force model value to string instead of date */
    formatValue: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectedDateLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    stateful: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    type: {
        type: PropType<NonNullable<import("../va-date-picker/types").DatePickerType | undefined>>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType | undefined;
    };
    mode: {
        type: PropType<NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView>;
        required: true;
        default: import("../va-date-picker/types").DatePickerView | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<NonNullable<"Monday" | "Sunday" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"Monday" | "Sunday" | undefined> | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    weekendsColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    placement: {
        type: PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables").PlacementWithAlias | undefined;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hoverOverTimeout: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
}, {
    valueText: import("vue").ComputedRef<string>;
    valueWithoutText: import("vue").WritableComputedRef<Date | Date[] | import("./types").DateInputRange<Date> | null | undefined>;
    valueDate: import("vue").WritableComputedRef<Date | Date[] | import("./types").DateInputRange<Date> | null | undefined>;
    focus: () => void;
    blur: () => void;
    reset: () => void;
    validate: () => boolean;
    showDropdown: () => void;
    hideAndFocus: () => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    focusDatePicker: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        default: () => number[];
        type: PropType<NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>>;
        required: true;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    /** Force model value to string instead of date */
    formatValue: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ariaToggleDropdownLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaResetLabel: {
        type: StringConstructor;
        default: string;
    };
    ariaSelectedDateLabel: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<import("../../composables").ValidationRule<any>[]>;
        default: () => any;
    } & {
        type: PropType<import("../../composables").ValidationRule<DateInputModelValue>[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    "onUpdate:modelValue": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    stateful: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    type: {
        type: PropType<NonNullable<import("../va-date-picker/types").DatePickerType | undefined>>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType | undefined;
    };
    mode: {
        type: PropType<NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>>;
        required: true;
        default: NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined;
    };
    disabled: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    readonly: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView>;
        required: true;
        default: import("../va-date-picker/types").DatePickerView | undefined;
    };
    "onUpdate:view": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    ariaNextPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaPreviousPeriodLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    ariaSwitchViewLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    "onHover:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:day": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[] | undefined;
    };
    firstWeekday: {
        type: PropType<NonNullable<NonNullable<"Monday" | "Sunday" | undefined> | undefined>>;
        required: true;
        default: NonNullable<"Monday" | "Sunday" | undefined> | undefined;
    };
    hideWeekDays: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    showOtherMonths: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    weekends: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    highlightWeekend: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    highlightToday: {
        type: PropType<NonNullable<NonNullable<boolean | undefined> | undefined>>;
        required: true;
        default: NonNullable<boolean | undefined> | undefined;
    };
    "onHover:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:month": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedMonths: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    "onHover:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick:year": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        required: true;
        default: ((date: Date) => boolean) | undefined;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    weekendsColor: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    requiredMark: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    onClick: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    counter: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    background: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaLabelledby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    closeOnChange: {
        type: BooleanConstructor;
        default: null;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    target: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    anchor: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    onClose: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    onOpen: {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaLabel: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    placement: {
        type: PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables").PlacementWithAlias | undefined;
    };
    role: {
        type: PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    "onAnchor-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: PropType<string>;
        required: true;
        default: string | undefined;
    };
    trigger: {
        type: PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
        default: import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
    };
    closeOnClickOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hoverOverTimeout: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    hoverOutTimeout: {
        type: PropType<number>;
        required: true;
        default: number | undefined;
    };
    isContentHoverable: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    autoPlacement: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    teleport: {
        type: PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
}>>, {
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    stateful: NonNullable<boolean | undefined>;
    type: NonNullable<import("../va-date-picker/types").DatePickerType | undefined>;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    color: string;
    icon: string;
    name: string;
    mode: NonNullable<NonNullable<import("../va-date-picker/types").DatePickerMode | undefined> | undefined>;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    success: boolean;
    onClose: (...args: any[]) => any;
    onOpen: (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    error: boolean;
    loading: NonNullable<boolean | undefined>;
    ariaLabel: string;
    placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
    offset: NonNullable<import("../va-dropdown/types").DropdownOffsetProp | undefined>;
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    disabled: NonNullable<boolean | undefined>;
    label: string;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    readonly: NonNullable<boolean | undefined>;
    closeOnClickOutside: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: NonNullable<boolean | undefined>;
    keepAnchorWidth: NonNullable<boolean | undefined>;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    view: import("../va-date-picker/types").DatePickerView;
    leftIcon: boolean;
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    rules: import("../../composables").ValidationRule<DateInputModelValue>[];
    messages: string | string[];
    immediateValidation: boolean;
    requiredMark: NonNullable<boolean | undefined>;
    onClick: (...args: any[]) => any;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: NonNullable<boolean | undefined>;
    placeholder: string;
    background: string;
    innerLabel: NonNullable<boolean | undefined>;
    inputAriaLabel: string;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    ariaResetLabel: string;
    clearable: boolean;
    clearableIcon: string;
    clearValue: DateInputModelValue;
    manualInput: boolean;
    "onUpdate:view": (...args: any[]) => any;
    monthNames: string[];
    ariaNextPeriodLabel: string;
    ariaPreviousPeriodLabel: string;
    ariaSwitchViewLabel: string;
    "onHover:day": (...args: any[]) => any;
    "onClick:day": (...args: any[]) => any;
    weekdayNames: string[];
    firstWeekday: NonNullable<NonNullable<"Monday" | "Sunday" | undefined> | undefined>;
    hideWeekDays: NonNullable<NonNullable<boolean | undefined> | undefined>;
    showOtherMonths: NonNullable<NonNullable<boolean | undefined> | undefined>;
    allowedDays: (date: Date) => boolean;
    weekends: (date: Date) => boolean;
    highlightWeekend: NonNullable<NonNullable<boolean | undefined> | undefined>;
    highlightToday: NonNullable<NonNullable<boolean | undefined> | undefined>;
    "onHover:month": (...args: any[]) => any;
    "onClick:month": (...args: any[]) => any;
    allowedMonths: (date: Date) => boolean;
    "onHover:year": (...args: any[]) => any;
    "onClick:year": (...args: any[]) => any;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
    weekendsColor: string;
    resetOnClose: boolean;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
    ariaToggleDropdownLabel: string;
    ariaSelectedDateLabel: string;
    closeOnChange: boolean;
    isOpen: boolean;
}, {}>, Partial<Record<string, (_: any) => any>> & Partial<Record<NonNullable<string | number>, (_: any) => any>> & {
    input?(_: {
        valueText: string;
        inputAttributes: {
            'aria-invalid': boolean;
            'aria-errormessage': string;
            readonly: boolean;
            disabled: NonNullable<boolean | undefined>;
            tabindex: number;
            placeholder: string;
            value: string;
            ariaLabel: string;
            ariaRequired: NonNullable<boolean | undefined>;
            ariaDisabled: NonNullable<boolean | undefined>;
            ariaReadOnly: NonNullable<boolean | undefined>;
        };
        inputWrapperProps: {
            focused: boolean | undefined;
            error: boolean;
            errorMessages: string[];
            readonly: boolean;
            preset: string;
            color: string;
            name: string;
            success: NonNullable<boolean | undefined>;
            loading: NonNullable<boolean | undefined>;
            disabled: NonNullable<boolean | undefined>;
            label: string;
            dirty: NonNullable<boolean | undefined>;
            errorCount: NonNullable<string | number | undefined>;
            rules: import("../../composables").ValidationRule<any>[];
            messages: NonNullable<string | string[] | undefined>;
            immediateValidation: NonNullable<boolean | undefined>;
            requiredMark: NonNullable<boolean | undefined>;
            counter: NonNullable<boolean | undefined>;
            placeholder: string;
            background: string;
            innerLabel: NonNullable<boolean | undefined>;
            inputAriaLabel: string;
            inputAriaLabelledby: string;
            inputAriaDescribedby: string;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            modelValue?: any;
            onClick?: ((...args: any[]) => any) | undefined;
            "onClick-prepend"?: ((...args: any[]) => any) | undefined;
            "onClick-append"?: ((...args: any[]) => any) | undefined;
            "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
            "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
            "onClick-field"?: ((...args: any[]) => any) | undefined;
        };
        inputListeners: {
            focus: () => void;
            blur: () => void;
        };
    }): any;
    prependInner?(_: any): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
