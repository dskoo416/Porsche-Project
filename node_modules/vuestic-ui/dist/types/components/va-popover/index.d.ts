export declare const VaPopover: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        trigger: {
            default: string[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        autoHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables").PlacementWithAlias | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        trigger: {
            default: string[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        autoHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables").PlacementWithAlias | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: NonNullable<boolean | undefined>;
        stateful: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        color: string;
        title: string;
        icon: string;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        onClose: (...args: any[]) => any;
        onOpen: (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        message: string;
        ariaLabel: string;
        placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
        offset: number | [number, number];
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        readonly: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: NonNullable<boolean | undefined>;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        isContentHoverable: NonNullable<boolean | undefined>;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        autoHide: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        trigger: {
            default: string[];
            type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
            required: true;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        message: {
            type: StringConstructor;
            default: string;
        };
        autoHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<number | [number, number]>;
            default: number;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        modelValue: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stateful: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        target: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        anchor: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        onClose: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        onOpen: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        ariaLabel: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        placement: {
            type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
            required: true;
            default: import("../../composables").PlacementWithAlias | undefined;
        };
        role: {
            type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
            required: true;
            default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
        };
        disabled: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onAnchor-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-right-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onContent-click": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onFocus-outside": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onAnchor-dblclick": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        anchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerAnchorSelector: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        readonly: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnFocusOutside: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnAnchorClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        closeOnContentClick: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        hoverOverTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        hoverOutTimeout: {
            type: import("vue").PropType<number>;
            required: true;
            default: number | undefined;
        };
        isContentHoverable: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        keepAnchorWidth: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        verticalScrollOnOverflow: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        cursor: {
            type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
            required: true;
            default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
        };
        autoPlacement: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        stickToEdges: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        teleport: {
            type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
            required: true;
            default: import("../../composables").MaybeHTMLElementOrSelector;
        };
        keyboardNavigation: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
    }>>, {}, {}, {}, {}, {
        preset: string;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: NonNullable<boolean | undefined>;
        stateful: NonNullable<boolean | undefined>;
        target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        color: string;
        title: string;
        icon: string;
        anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        onClose: (...args: any[]) => any;
        onOpen: (...args: any[]) => any;
        "onClick-outside": (...args: any[]) => any;
        message: string;
        ariaLabel: string;
        placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
        offset: number | [number, number];
        role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
        disabled: NonNullable<boolean | undefined>;
        "onAnchor-click": (...args: any[]) => any;
        "onAnchor-right-click": (...args: any[]) => any;
        "onContent-click": (...args: any[]) => any;
        "onFocus-outside": (...args: any[]) => any;
        "onAnchor-dblclick": (...args: any[]) => any;
        anchorSelector: string;
        innerAnchorSelector: string;
        trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
        readonly: NonNullable<boolean | undefined>;
        closeOnFocusOutside: NonNullable<boolean | undefined>;
        closeOnAnchorClick: NonNullable<boolean | undefined>;
        closeOnContentClick: NonNullable<boolean | undefined>;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        isContentHoverable: NonNullable<boolean | undefined>;
        keepAnchorWidth: NonNullable<boolean | undefined>;
        verticalScrollOnOverflow: NonNullable<boolean | undefined>;
        cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
        autoPlacement: NonNullable<boolean | undefined>;
        stickToEdges: NonNullable<boolean | undefined>;
        teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
        keyboardNavigation: NonNullable<boolean | undefined>;
        autoHide: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    trigger: {
        default: string[];
        type: import("vue").PropType<NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>>;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    autoHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    modelValue: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stateful: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    target: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    anchor: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    onClose: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    onOpen: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    ariaLabel: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    placement: {
        type: import("vue").PropType<NonNullable<import("../../composables").PlacementWithAlias | undefined>>;
        required: true;
        default: import("../../composables").PlacementWithAlias | undefined;
    };
    role: {
        type: import("vue").PropType<NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>>;
        required: true;
        default: import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
    };
    disabled: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onAnchor-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-right-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onContent-click": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onFocus-outside": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onAnchor-dblclick": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerAnchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    readonly: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnFocusOutside: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    closeOnContentClick: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number | undefined;
    };
    isContentHoverable: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    verticalScrollOnOverflow: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    cursor: {
        type: import("vue").PropType<NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>>;
        required: true;
        default: boolean | import("../va-dropdown/types").CursorAnchor | undefined;
    };
    autoPlacement: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    stickToEdges: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    teleport: {
        type: import("vue").PropType<NonNullable<import("../../composables").MaybeHTMLElementOrSelector>>;
        required: true;
        default: import("../../composables").MaybeHTMLElementOrSelector;
    };
    keyboardNavigation: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
}>>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    preset: string;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: NonNullable<boolean | undefined>;
    stateful: NonNullable<boolean | undefined>;
    target: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    color: string;
    title: string;
    icon: string;
    anchor: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    onClose: (...args: any[]) => any;
    onOpen: (...args: any[]) => any;
    "onClick-outside": (...args: any[]) => any;
    message: string;
    ariaLabel: string;
    placement: NonNullable<import("../../composables").PlacementWithAlias | undefined>;
    offset: number | [number, number];
    role: NonNullable<import("../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined>;
    disabled: NonNullable<boolean | undefined>;
    "onAnchor-click": (...args: any[]) => any;
    "onAnchor-right-click": (...args: any[]) => any;
    "onContent-click": (...args: any[]) => any;
    "onFocus-outside": (...args: any[]) => any;
    "onAnchor-dblclick": (...args: any[]) => any;
    anchorSelector: string;
    innerAnchorSelector: string;
    trigger: NonNullable<import("../va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined>;
    readonly: NonNullable<boolean | undefined>;
    closeOnFocusOutside: NonNullable<boolean | undefined>;
    closeOnAnchorClick: NonNullable<boolean | undefined>;
    closeOnContentClick: NonNullable<boolean | undefined>;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    isContentHoverable: NonNullable<boolean | undefined>;
    keepAnchorWidth: NonNullable<boolean | undefined>;
    verticalScrollOnOverflow: NonNullable<boolean | undefined>;
    cursor: NonNullable<boolean | import("../va-dropdown/types").CursorAnchor | undefined>;
    autoPlacement: NonNullable<boolean | undefined>;
    stickToEdges: NonNullable<boolean | undefined>;
    teleport: NonNullable<import("../../composables").MaybeHTMLElementOrSelector>;
    keyboardNavigation: NonNullable<boolean | undefined>;
    autoHide: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        icon?(_: {}): any;
        title?(_: {}): any;
        body?(_: {}): any;
        default?(_: {}): any;
    };
});
