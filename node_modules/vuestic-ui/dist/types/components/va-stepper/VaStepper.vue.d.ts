import { PropType, Ref } from 'vue';
import type { Step, StepControls } from './types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: PropType<Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    linear: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    modelValue: Ref<number>;
    focusedStep: Ref<{
        trigger: boolean;
        stepIndex: number;
    }>;
    getIterableSlotData: (step: Step, index: number) => {
        focus: Ref<{
            trigger: boolean;
            stepIndex: number;
        }>;
        isActive: boolean;
        isCompleted: boolean;
        isLastStep: boolean;
        isNextStepDisabled: boolean;
        index: number;
        step: Step;
        setStep: (index: number) => void;
        nextStep: (stepsToSkip?: number | undefined) => void;
        prevStep: (stepsToSkip?: number | undefined) => void;
    };
    stepControls: StepControls;
    nextStep: (stepsToSkip?: number) => void;
    prevStep: (stepsToSkip?: number) => void;
    setStep: (index: number) => void;
    setFocus: (direction: "next" | "prev") => void;
    completeStep: (shouldCompleteStep?: boolean | undefined) => void;
    setError: (shouldSetError?: boolean | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    finish: (...args: any[]) => void;
    "update:steps": (...args: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    steps: {
        type: PropType<Step[]>;
        default: () => never[];
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigationDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    controlsHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishButtonHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    linear: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onFinish?: ((...args: any[]) => any) | undefined;
    "onUpdate:steps"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    stateful: boolean;
    color: string;
    vertical: boolean;
    ariaLabel: string;
    linear: boolean;
    steps: Step[];
    navigationDisabled: boolean;
    controlsHidden: boolean;
    nextDisabled: boolean;
    finishButtonHidden: boolean;
}, {}>, Partial<Record<`step-button-${number}`, (_: {
    focus: Ref<{
        trigger: boolean;
        stepIndex: number;
    }>;
    isActive: boolean;
    isCompleted: boolean;
    isLastStep: boolean;
    isNextStepDisabled: boolean;
    index: number;
    step: Step;
    setStep: (index: number) => void;
    nextStep: (stepsToSkip?: number | undefined) => void;
    prevStep: (stepsToSkip?: number | undefined) => void;
}) => any>> & Partial<Record<`step-content-${number}`, (_: {
    focus: Ref<{
        trigger: boolean;
        stepIndex: number;
    }>;
    isActive: boolean;
    isCompleted: boolean;
    isLastStep: boolean;
    isNextStepDisabled: boolean;
    index: number;
    step: Step;
    setStep: (index: number) => void;
    nextStep: (stepsToSkip?: number | undefined) => void;
    prevStep: (stepsToSkip?: number | undefined) => void;
}) => any>> & {
    divider?(_: {
        focus: Ref<{
            trigger: boolean;
            stepIndex: number;
        }>;
        isActive: boolean;
        isCompleted: boolean;
        isLastStep: boolean;
        isNextStepDisabled: boolean;
        index: number;
        step: Step;
        setStep: (index: number) => void;
        nextStep: (stepsToSkip?: number | undefined) => void;
        prevStep: (stepsToSkip?: number | undefined) => void;
    }): any;
    controls?(_: {
        focus: Ref<{
            trigger: boolean;
            stepIndex: number;
        }>;
        isActive: boolean;
        isCompleted: boolean;
        isLastStep: boolean;
        isNextStepDisabled: boolean;
        index: number;
        step: Step;
        setStep: (index: number) => void;
        nextStep: (stepsToSkip?: number | undefined) => void;
        prevStep: (stepsToSkip?: number | undefined) => void;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
