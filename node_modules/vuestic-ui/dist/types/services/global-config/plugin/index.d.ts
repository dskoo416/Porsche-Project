import { createGlobalConfig } from '../global-config';
/** Provides global configuration to Vuestic components */
export declare const GlobalConfigPlugin: import("../../vue-plugin/types").VuesticPluginFabric<[config?: {
    colors?: {
        variables?: {
            [x: string]: string | undefined;
            primary?: string | undefined;
            secondary?: string | undefined;
            success?: string | undefined;
            info?: string | undefined;
            danger?: string | undefined;
            warning?: string | undefined;
            backgroundPrimary?: string | undefined;
            backgroundSecondary?: string | undefined;
            backgroundElement?: string | undefined;
            backgroundBorder?: string | undefined;
            textPrimary?: string | undefined;
            textInverted?: string | undefined;
            shadow?: string | undefined;
            focus?: string | undefined;
            transparent?: string | undefined;
            onPrimary?: string | undefined;
            onSecondary?: string | undefined;
            onSuccess?: string | undefined;
            onInfo?: string | undefined;
            onDanger?: string | undefined;
            onWarning?: string | undefined;
            onBackgroundPrimary?: string | undefined;
            onBackgroundSecondary?: string | undefined;
            onBackgroundElement?: string | undefined;
            onBackgroundBorder?: string | undefined;
            onTextPrimary?: string | undefined;
            onTextInverted?: string | undefined;
            onShadow?: string | undefined;
            onFocus?: string | undefined;
            onTransparent?: string | undefined;
        } | undefined;
        threshold?: number | undefined;
        presets?: {
            [x: string]: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
                transparent?: string | undefined;
                onPrimary?: string | undefined;
                onSecondary?: string | undefined;
                onSuccess?: string | undefined;
                onInfo?: string | undefined;
                onDanger?: string | undefined;
                onWarning?: string | undefined;
                onBackgroundPrimary?: string | undefined;
                onBackgroundSecondary?: string | undefined;
                onBackgroundElement?: string | undefined;
                onBackgroundBorder?: string | undefined;
                onTextPrimary?: string | undefined;
                onTextInverted?: string | undefined;
                onShadow?: string | undefined;
                onFocus?: string | undefined;
                onTransparent?: string | undefined;
            } | undefined;
            light?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
                transparent?: string | undefined;
                onPrimary?: string | undefined;
                onSecondary?: string | undefined;
                onSuccess?: string | undefined;
                onInfo?: string | undefined;
                onDanger?: string | undefined;
                onWarning?: string | undefined;
                onBackgroundPrimary?: string | undefined;
                onBackgroundSecondary?: string | undefined;
                onBackgroundElement?: string | undefined;
                onBackgroundBorder?: string | undefined;
                onTextPrimary?: string | undefined;
                onTextInverted?: string | undefined;
                onShadow?: string | undefined;
                onFocus?: string | undefined;
                onTransparent?: string | undefined;
            } | undefined;
            dark?: {
                [x: string]: string | undefined;
                primary?: string | undefined;
                secondary?: string | undefined;
                success?: string | undefined;
                info?: string | undefined;
                danger?: string | undefined;
                warning?: string | undefined;
                backgroundPrimary?: string | undefined;
                backgroundSecondary?: string | undefined;
                backgroundElement?: string | undefined;
                backgroundBorder?: string | undefined;
                textPrimary?: string | undefined;
                textInverted?: string | undefined;
                shadow?: string | undefined;
                focus?: string | undefined;
                transparent?: string | undefined;
                onPrimary?: string | undefined;
                onSecondary?: string | undefined;
                onSuccess?: string | undefined;
                onInfo?: string | undefined;
                onDanger?: string | undefined;
                onWarning?: string | undefined;
                onBackgroundPrimary?: string | undefined;
                onBackgroundSecondary?: string | undefined;
                onBackgroundElement?: string | undefined;
                onBackgroundBorder?: string | undefined;
                onTextPrimary?: string | undefined;
                onTextInverted?: string | undefined;
                onShadow?: string | undefined;
                onFocus?: string | undefined;
                onTransparent?: string | undefined;
            } | undefined;
        } | undefined;
        currentPresetName?: string | undefined;
    } | undefined;
    icons?: ({
        name?: string | undefined;
        resolve?: {} | undefined;
        attrs?: {
            [x: string]: string | {} | undefined;
        } | undefined;
        component?: any;
        content?: string | undefined;
        class?: string | undefined;
        tag?: string | undefined;
        color?: string | undefined;
        rotation?: string | number | undefined;
        spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
        to?: string | undefined;
    } | {
        name?: {
            exec?: {} | undefined;
            test?: {} | undefined;
            readonly source?: string | undefined;
            readonly global?: boolean | undefined;
            readonly ignoreCase?: boolean | undefined;
            readonly multiline?: boolean | undefined;
            lastIndex?: number | undefined;
            compile?: {} | undefined;
            readonly flags?: string | undefined;
            readonly sticky?: boolean | undefined;
            readonly unicode?: boolean | undefined;
            readonly dotAll?: boolean | undefined;
            readonly hasIndices?: boolean | undefined;
            [Symbol.match]?: {} | undefined;
            [Symbol.replace]?: {} | undefined;
            [Symbol.search]?: {} | undefined;
            [Symbol.split]?: {} | undefined;
            [Symbol.matchAll]?: {} | undefined;
        } | undefined;
        resolveFromRegex?: {} | undefined;
        attrs?: {
            [x: string]: string | {} | undefined;
        } | undefined;
        component?: any;
        content?: string | undefined;
        class?: string | undefined;
        tag?: string | undefined;
        color?: string | undefined;
        rotation?: string | number | undefined;
        spin?: boolean | "clockwise" | "counter-clockwise" | undefined;
        to?: string | undefined;
    } | undefined)[] | undefined;
    components?: Partial<{
        VaAccordion: {
            preset?: string | undefined;
            modelValue?: boolean[] | undefined;
            multiple?: boolean | undefined;
            inset?: boolean | undefined;
            stateful?: boolean | undefined;
            popout?: boolean | undefined;
        };
        VaAffix: {
            preset?: string | undefined;
            offsetTop?: number | undefined;
            offsetBottom?: number | undefined;
            target?: HTMLElement | Window | (() => HTMLElement | Window) | undefined;
        };
        VaAlert: {
            center?: boolean | undefined;
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            title?: string | undefined;
            description?: string | undefined;
            icon?: string | undefined;
            closeText?: string | undefined;
            closeIcon?: string | undefined;
            closeable?: boolean | undefined;
            dense?: boolean | undefined;
            outline?: boolean | undefined;
            borderColor?: string | undefined;
            border?: "" | "left" | "right" | "top" | "bottom" | undefined;
        };
        VaAppBar: {
            preset?: string | undefined;
            target?: string | HTMLElement | undefined;
            bottom?: boolean | undefined;
            color?: string | undefined;
            gradient?: boolean | undefined;
            shadowOnScroll?: boolean | undefined;
            shadowColor?: string | undefined;
            hideOnScroll?: boolean | undefined;
            fixed?: boolean | undefined;
        };
        VaAspectRatio: {
            preset?: string | undefined;
            ratio?: number | "auto" | undefined;
            contentHeight?: number | undefined;
            contentWidth?: number | undefined;
            maxWidth?: number | undefined;
        };
        VaAvatar: {
            preset?: string | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            icon?: string | undefined;
            size?: string | number | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            src?: string | undefined;
            square?: boolean | undefined;
            fontSize?: string | undefined;
            alt?: string | undefined;
            loading?: boolean | undefined;
        };
        VaAvatarGroup: {
            preset?: string | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            vertical?: boolean | undefined;
            size?: NonNullable<string | number | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            src?: string | undefined;
            square?: NonNullable<boolean | undefined> | undefined;
            fontSize?: string | undefined;
            alt?: string | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            max?: number | undefined;
            options?: Record<string, unknown>[] | undefined;
            restColor?: string | undefined;
        };
        VaBacktop: {
            preset?: string | undefined;
            target?: string | Element | undefined;
            color?: string | undefined;
            visibilityHeight?: number | undefined;
            speed?: number | undefined;
            verticalOffset?: string | undefined;
            horizontalOffset?: string | undefined;
            horizontalPosition?: "left" | "right" | undefined;
            verticalPosition?: "top" | "bottom" | undefined;
            ariaLabel?: string | undefined;
        };
        VaBadge: {
            preset?: string | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            transparent?: boolean | undefined;
            text?: string | number | undefined;
            multiLine?: boolean | undefined;
            visibleEmpty?: boolean | undefined;
            dot?: boolean | undefined;
            overlap?: boolean | undefined;
            placement?: import("../../../composables").PlacementWithAlias | undefined;
            offset?: import("../../../components/va-badge/types").BadgeOffsetProp | undefined;
        };
        VaBreadcrumbs: {
            preset?: string | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            ariaLabel?: string | undefined;
            separator?: string | undefined;
            disabledColor?: string | undefined;
            activeColor?: string | undefined;
            separatorColor?: string | undefined;
            align?: string | undefined;
        };
        VaBreadcrumbsItem: {
            target?: string | undefined;
            tag?: string | undefined;
            replace?: boolean | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
        };
        VaButton: {
            preset?: string | undefined;
            type?: string | undefined;
            target?: string | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            tag?: string | undefined;
            size?: "small" | "medium" | "large" | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            replace?: boolean | undefined;
            loading?: boolean | undefined;
            disabled?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            block?: boolean | undefined;
            textOpacity?: number | undefined;
            backgroundOpacity?: number | undefined;
            plain?: boolean | undefined;
            round?: boolean | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: "opacity" | "mask" | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: "opacity" | "mask" | undefined;
            hoverOpacity?: number | undefined;
            hoverMaskColor?: string | undefined;
        };
        VaButtonDropdown: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            type?: string | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            borderColor?: string | undefined;
            gradient?: NonNullable<boolean | undefined> | undefined;
            tag?: string | undefined;
            size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            replace?: NonNullable<boolean | undefined> | undefined;
            split?: boolean | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            loading?: boolean | undefined;
            ariaLabel?: string | undefined;
            placement?: import("../../../composables").PlacementWithAlias | undefined;
            offset?: number | [number, number] | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: boolean | undefined;
            readonly label?: string | undefined;
            to?: NonNullable<string | Record<string, any> | undefined> | undefined;
            append?: NonNullable<boolean | undefined> | undefined;
            exact?: NonNullable<boolean | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            textOpacity?: number | undefined;
            backgroundOpacity?: number | undefined;
            plain?: NonNullable<boolean | undefined> | undefined;
            round?: NonNullable<boolean | undefined> | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<"opacity" | "mask" | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<"opacity" | "mask" | undefined> | undefined;
            hoverOpacity?: number | undefined;
            hoverMaskColor?: string | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: boolean | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            openedIcon?: string | undefined;
            hideIcon?: boolean | undefined;
            leftIcon?: boolean | undefined;
            disableButton?: boolean | undefined;
            disableDropdown?: boolean | undefined;
            splitTo?: string | undefined;
            splitHref?: string | undefined;
        };
        VaButtonGroup: {
            preset?: string | undefined;
            type?: string | undefined;
            target?: string | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            tag?: string | undefined;
            size?: NonNullable<"small" | "medium" | "large" | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            replace?: NonNullable<boolean | undefined> | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            to?: NonNullable<string | Record<string, any> | undefined> | undefined;
            append?: NonNullable<boolean | undefined> | undefined;
            exact?: NonNullable<boolean | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            textOpacity?: number | undefined;
            backgroundOpacity?: number | undefined;
            plain?: NonNullable<boolean | undefined> | undefined;
            round?: NonNullable<boolean | undefined> | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<"opacity" | "mask" | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<"opacity" | "mask" | undefined> | undefined;
            hoverOpacity?: number | undefined;
            hoverMaskColor?: string | undefined;
            grow?: boolean | undefined;
        };
        VaButtonToggle: {
            preset?: string | undefined;
            modelValue?: string | number | boolean | undefined;
            type?: string | undefined;
            target?: string | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            borderColor?: string | undefined;
            gradient?: NonNullable<boolean | undefined> | undefined;
            tag?: string | undefined;
            size?: NonNullable<NonNullable<"small" | "medium" | "large" | undefined> | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            replace?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            readonly options?: import("../../../components").ButtonOption[] | undefined;
            disabled?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            to?: NonNullable<NonNullable<string | Record<string, any> | undefined> | undefined> | undefined;
            append?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            exact?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            textOpacity?: number | undefined;
            backgroundOpacity?: number | undefined;
            plain?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            round?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            iconRight?: string | undefined;
            iconColor?: string | undefined;
            pressedBehavior?: NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined> | undefined;
            pressedOpacity?: number | undefined;
            pressedMaskColor?: string | undefined;
            hoverBehavior?: NonNullable<NonNullable<"opacity" | "mask" | undefined> | undefined> | undefined;
            hoverOpacity?: number | undefined;
            hoverMaskColor?: string | undefined;
            grow?: NonNullable<boolean | undefined> | undefined;
            readonly activeButtonTextColor?: string | undefined;
            toggleColor?: string | undefined;
            textBy?: import("../../../composables").StringOrFunction | undefined;
            valueBy?: import("../../../composables").StringOrFunction | undefined;
            trackBy?: import("../../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../../composables").StringOrFunction | undefined;
            groupBy?: import("../../../composables").StringOrFunction | undefined;
        };
        VaCard: {
            preset?: string | undefined;
            target?: string | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            gradient?: boolean | undefined;
            tag?: string | undefined;
            replace?: boolean | undefined;
            square?: boolean | undefined;
            disabled?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            outlined?: boolean | undefined;
            bordered?: boolean | undefined;
            stripe?: boolean | undefined;
            stripeColor?: string | undefined;
        };
        VaCardBlock: {
            horizontal?: boolean | undefined;
        };
        VaCardActions: {
            preset?: string | undefined;
            vertical?: boolean | undefined;
            align?: string | undefined;
        };
        VaCardContent: {};
        VaCardTitle: {
            preset?: string | undefined;
            readonly textColor?: string | undefined;
        };
        VaCarousel: {
            preset?: string | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            readonly items?: any[] | undefined;
            color?: string | undefined;
            title?: string | undefined;
            readonly ratio?: number | undefined;
            maxWidth?: number | undefined;
            vertical?: boolean | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            loading?: NonNullable<"lazy" | "eager" | undefined> | undefined;
            ariaLabel?: string | undefined;
            height?: string | undefined;
            lazy?: NonNullable<boolean | undefined> | undefined;
            fit?: NonNullable<"fill" | "none" | "contain" | "cover" | "scale-down" | undefined> | undefined;
            placeholderSrc?: string | undefined;
            sizes?: string | undefined;
            srcset?: string | undefined;
            draggable?: NonNullable<boolean | undefined> | undefined;
            crossorigin?: NonNullable<"anonymous" | "use-credentials" | undefined> | undefined;
            decoding?: NonNullable<"auto" | "sync" | "async" | undefined> | undefined;
            fetchpriority?: NonNullable<"auto" | "high" | "low" | undefined> | undefined;
            referrerpolicy?: NonNullable<"no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined> | undefined;
            autoscroll?: boolean | undefined;
            autoscrollInterval?: number | undefined;
            autoscrollPauseDuration?: number | undefined;
            infinite?: boolean | undefined;
            fadeKeyframe?: string | undefined;
            arrows?: boolean | undefined;
            indicators?: boolean | undefined;
            indicatorTrigger?: "click" | "hover" | "none" | undefined;
            effect?: "fade" | "transition" | undefined;
            ariaPreviousLabel?: string | undefined;
            ariaNextLabel?: string | undefined;
            ariaGoToSlideLabel?: string | undefined;
            ariaSlideOfLabel?: string | undefined;
            swipable?: boolean | undefined;
            swipeDistance?: number | undefined;
            swipeDirection?: ("all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down")) | undefined;
        };
        VaCheckbox: {
            preset?: string | undefined;
            modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: boolean | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            readonly?: boolean | undefined;
            checkedIcon?: string | undefined;
            indeterminate?: boolean | undefined;
            indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
            indeterminateIcon?: string | undefined;
            id?: string | undefined;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
        };
        VaChip: {
            flat?: boolean | undefined;
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            target?: string | undefined;
            color?: string | undefined;
            icon?: string | undefined;
            closeable?: boolean | undefined;
            outline?: boolean | undefined;
            tag?: string | undefined;
            size?: "small" | "medium" | "large" | undefined;
            replace?: boolean | undefined;
            shadow?: boolean | undefined;
            ariaCloseLabel?: string | undefined;
            square?: boolean | undefined;
            disabled?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            readonly?: boolean | undefined;
        };
        VaCollapse: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textColor?: string | undefined;
            icon?: string | undefined;
            disabled?: boolean | undefined;
            iconColor?: string | undefined;
            header?: string | undefined;
            bodyColor?: string | undefined;
            bodyTextColor?: string | undefined;
            colorAll?: boolean | undefined;
        };
        VaColorIndicator: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            size?: string | undefined;
            square?: boolean | undefined;
        };
        VaColorInput: {
            preset?: string | undefined;
            modelValue?: string | undefined;
            stateful?: boolean | undefined;
            type?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined> | undefined;
            color?: string | undefined;
            name?: string | undefined;
            success?: NonNullable<boolean | undefined> | undefined;
            error?: NonNullable<boolean | undefined> | undefined;
            loading?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            mask?: NonNullable<string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            pattern?: string | undefined;
            dirty?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: NonNullable<string | string[] | undefined> | undefined;
            errorCount?: NonNullable<string | number | undefined> | undefined;
            rules?: import("../../../composables").ValidationRule<string>[] | undefined;
            messages?: NonNullable<string | string[] | undefined> | undefined;
            immediateValidation?: NonNullable<boolean | undefined> | undefined;
            requiredMark?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: number | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            tabindex?: NonNullable<string | number | undefined> | undefined;
            inputClass?: string | undefined;
            inputmode?: string | undefined;
            ariaResetLabel?: string | undefined;
            strictBindInputValue?: NonNullable<boolean | undefined> | undefined;
            returnRaw?: NonNullable<boolean | undefined> | undefined;
            clearable?: NonNullable<boolean | undefined> | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            autofocus?: NonNullable<boolean | undefined> | undefined;
            indicator?: "square" | "dot" | undefined;
            ariaOpenColorPickerLabel?: string | undefined;
        };
        VaColorPalette: {
            preset?: string | undefined;
            modelValue?: string | undefined;
            stateful?: boolean | undefined;
            ariaLabel?: string | undefined;
            indicator?: "square" | "dot" | undefined;
            palette?: string[] | undefined;
            ariaIndicatorLabel?: string | undefined;
        };
        VaConfig: {
            preset?: string | undefined;
            components?: Partial<any & {
                all: import("../../component-config").Props;
                presets: import("../../component-config").Presets;
            }> | undefined;
            readonly colors?: {
                variables?: {
                    [x: string]: string | undefined;
                    primary?: string | undefined;
                    secondary?: string | undefined;
                    success?: string | undefined;
                    info?: string | undefined;
                    danger?: string | undefined;
                    warning?: string | undefined;
                    backgroundPrimary?: string | undefined;
                    backgroundSecondary?: string | undefined;
                    backgroundElement?: string | undefined;
                    backgroundBorder?: string | undefined;
                    textPrimary?: string | undefined;
                    textInverted?: string | undefined;
                    shadow?: string | undefined;
                    focus?: string | undefined;
                    transparent?: string | undefined;
                    onPrimary?: string | undefined;
                    onSecondary?: string | undefined;
                    onSuccess?: string | undefined;
                    onInfo?: string | undefined;
                    onDanger?: string | undefined;
                    onWarning?: string | undefined;
                    onBackgroundPrimary?: string | undefined;
                    onBackgroundSecondary?: string | undefined;
                    onBackgroundElement?: string | undefined;
                    onBackgroundBorder?: string | undefined;
                    onTextPrimary?: string | undefined;
                    onTextInverted?: string | undefined;
                    onShadow?: string | undefined;
                    onFocus?: string | undefined;
                    onTransparent?: string | undefined;
                } | undefined;
                threshold?: number | undefined;
                presets?: {
                    [x: string]: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onPrimary?: string | undefined;
                        onSecondary?: string | undefined;
                        onSuccess?: string | undefined;
                        onInfo?: string | undefined;
                        onDanger?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onFocus?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    light?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onPrimary?: string | undefined;
                        onSecondary?: string | undefined;
                        onSuccess?: string | undefined;
                        onInfo?: string | undefined;
                        onDanger?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onFocus?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                    dark?: {
                        [x: string]: string | undefined;
                        primary?: string | undefined;
                        secondary?: string | undefined;
                        success?: string | undefined;
                        info?: string | undefined;
                        danger?: string | undefined;
                        warning?: string | undefined;
                        backgroundPrimary?: string | undefined;
                        backgroundSecondary?: string | undefined;
                        backgroundElement?: string | undefined;
                        backgroundBorder?: string | undefined;
                        textPrimary?: string | undefined;
                        textInverted?: string | undefined;
                        shadow?: string | undefined;
                        focus?: string | undefined;
                        transparent?: string | undefined;
                        onPrimary?: string | undefined;
                        onSecondary?: string | undefined;
                        onSuccess?: string | undefined;
                        onInfo?: string | undefined;
                        onDanger?: string | undefined;
                        onWarning?: string | undefined;
                        onBackgroundPrimary?: string | undefined;
                        onBackgroundSecondary?: string | undefined;
                        onBackgroundElement?: string | undefined;
                        onBackgroundBorder?: string | undefined;
                        onTextPrimary?: string | undefined;
                        onTextInverted?: string | undefined;
                        onShadow?: string | undefined;
                        onFocus?: string | undefined;
                        onTransparent?: string | undefined;
                    } | undefined;
                } | undefined;
                currentPresetName?: string | undefined;
            } | undefined;
            readonly i18n?: {
                search?: string | undefined;
                noOptions?: string | undefined;
                ok?: string | undefined;
                cancel?: string | undefined;
                uploadFile?: string | undefined;
                undo?: string | undefined;
                dropzone?: string | undefined;
                fileDeleted?: string | undefined;
                closeAlert?: string | undefined;
                backToTop?: string | undefined;
                toggleDropdown?: string | undefined;
                carousel?: string | undefined;
                goPreviousSlide?: string | undefined;
                goNextSlide?: string | undefined;
                goSlide?: string | undefined;
                slideOf?: string | undefined;
                close?: string | undefined;
                openColorPicker?: string | undefined;
                colorSelection?: string | undefined;
                colorName?: string | undefined;
                decreaseCounter?: string | undefined;
                increaseCounter?: string | undefined;
                selectAllRows?: string | undefined;
                sortColumnBy?: string | undefined;
                selectRowByIndex?: string | undefined;
                resetDate?: string | undefined;
                nextPeriod?: string | undefined;
                switchView?: string | undefined;
                previousPeriod?: string | undefined;
                removeFile?: string | undefined;
                reset?: string | undefined;
                pagination?: string | undefined;
                goToTheFirstPage?: string | undefined;
                goToPreviousPage?: string | undefined;
                goToSpecificPage?: string | undefined;
                goToSpecificPageInput?: string | undefined;
                goNextPage?: string | undefined;
                goLastPage?: string | undefined;
                currentRating?: string | undefined;
                voteRating?: string | undefined;
                optionsFilter?: string | undefined;
                splitPanels?: string | undefined;
                movePaginationLeft?: string | undefined;
                movePaginationRight?: string | undefined;
                resetTime?: string | undefined;
                closeToast?: string | undefined;
                selectedOption?: string | undefined;
                noSelectedOption?: string | undefined;
                breadcrumbs?: string | undefined;
                counterValue?: string | undefined;
                selectedDate?: string | undefined;
                selectedTime?: string | undefined;
                progressState?: string | undefined;
                color?: string | undefined;
                next?: string | undefined;
                back?: string | undefined;
                finish?: string | undefined;
                step?: string | undefined;
                progress?: string | undefined;
                loading?: string | undefined;
                sliderValue?: string | undefined;
                switch?: string | undefined;
                inputField?: string | undefined;
            } | undefined;
        };
        VaContent: {};
        VaCounter: {
            flat?: boolean | undefined;
            preset?: string | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            name?: string | undefined;
            success?: NonNullable<boolean | undefined> | undefined;
            error?: NonNullable<boolean | undefined> | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            readonly max?: number | undefined;
            ariaLabel?: string | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            label?: string | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            dirty?: NonNullable<boolean | undefined> | undefined;
            errorMessages?: NonNullable<string | string[] | undefined> | undefined;
            errorCount?: NonNullable<string | number | undefined> | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: NonNullable<string | string[] | undefined> | undefined;
            immediateValidation?: NonNullable<boolean | undefined> | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: number | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            readonly min?: number | undefined;
            step?: number | undefined;
            manualInput?: boolean | undefined;
            increaseIcon?: string | undefined;
            decreaseIcon?: string | undefined;
            buttons?: boolean | undefined;
            rounded?: boolean | undefined;
            margins?: string | number | undefined;
            longPressDelay?: number | undefined;
            ariaDecreaseLabel?: string | undefined;
            ariaIncreaseLabel?: string | undefined;
        };
        VaDataTable: {
            filter?: string | undefined;
            preset?: string | undefined;
            readonly modelValue?: any[] | undefined;
            items?: import("../../../components").DataTableItem[] | undefined;
            loading?: boolean | undefined;
            readonly height?: string | number | undefined;
            grid?: boolean | undefined;
            bench?: number | undefined;
            itemSize?: NonNullable<string | number | undefined> | undefined;
            wrapperSize?: string | number | undefined;
            selectMode?: import("../../../components").DataTableSelectMode | undefined;
            columns?: import("../../../components").DataTableColumnSource[] | undefined;
            ariaSelectAllRowsLabel?: string | undefined;
            ariaSortColumnByLabel?: string | undefined;
            selectedColor?: string | undefined;
            allowFooterSorting?: boolean | undefined;
            stickyHeader?: boolean | undefined;
            stickyFooter?: boolean | undefined;
            selectable?: boolean | undefined;
            readonly columnSorted?: any;
            hoverable?: boolean | undefined;
            clickable?: boolean | undefined;
            loadingColor?: string | undefined;
            noDataHtml?: string | undefined;
            noDataFilteredHtml?: string | undefined;
            hideDefaultHeader?: boolean | undefined;
            footerClone?: boolean | undefined;
            striped?: boolean | undefined;
            virtualScroller?: boolean | undefined;
            virtualTrackBy?: string | number | undefined;
            gridColumns?: number | undefined;
            ariaSelectRowLabel?: string | undefined;
            delay?: number | undefined;
            itemsTrackBy?: string | ((item: import("../../../components").DataTableItem) => any) | undefined;
            readonly perPage?: number | undefined;
            readonly currentPage?: number | undefined;
            readonly filterMethod?: import("../../../components").DataTableFilterMethod | undefined;
            sortingOptions?: import("../../../components").DataTableSortingOptions | undefined;
            readonly sortBy?: string | undefined;
            readonly sortingOrder?: import("../../../components").DataTableSortingOrder | undefined;
            disableClientSideSorting?: boolean | undefined;
            scrollTopMargin?: number | undefined;
            scrollBottomMargin?: number | undefined;
            readonly rowBind?: import("../../../components").DataTableRowBind | undefined;
            readonly cellBind?: import("../../../components").DataTableCellBind | undefined;
            animated?: boolean | undefined;
        };
        VaDateInput: {
            preset?: string | undefined;
            readonly modelValue?: import("../../../components/va-date-input/types").DateInputModelValue;
            stateful?: NonNullable<boolean | undefined> | undefined;
            type?: NonNullable<import("../../../components/va-date-picker/types").DatePickerType | undefined> | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            color?: string | undefined;
            icon?: string | undefined;
            name?: string | undefined;
            mode?: NonNullable<NonNullable<import("../../../components/va-date-picker/types").DatePickerMode | undefined> | undefined> | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            ariaLabel?: string | undefined;
            placement?: NonNullable<import("../../../composables").PlacementWithAlias | undefined> | undefined;
            offset?: NonNullable<import("../../../components/va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            label?: string | undefined;
            anchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            view?: import("../../../components/va-date-picker/types").DatePickerView | undefined;
            leftIcon?: boolean | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<import("../../../components/va-date-input/types").DateInputModelValue>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            ariaResetLabel?: string | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: import("../../../components/va-date-input/types").DateInputModelValue;
            manualInput?: boolean | undefined;
            monthNames?: string[] | undefined;
            ariaNextPeriodLabel?: string | undefined;
            ariaPreviousPeriodLabel?: string | undefined;
            ariaSwitchViewLabel?: string | undefined;
            weekdayNames?: string[] | undefined;
            firstWeekday?: NonNullable<NonNullable<"Monday" | "Sunday" | undefined> | undefined> | undefined;
            hideWeekDays?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            showOtherMonths?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            allowedDays?: ((date: Date) => boolean) | undefined;
            weekends?: ((date: Date) => boolean) | undefined;
            highlightWeekend?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            highlightToday?: NonNullable<NonNullable<boolean | undefined> | undefined> | undefined;
            allowedMonths?: ((date: Date) => boolean) | undefined;
            allowedYears?: ((date: Date) => boolean) | undefined;
            startYear?: number | undefined;
            endYear?: number | undefined;
            weekendsColor?: string | undefined;
            resetOnClose?: boolean | undefined;
            readonly format?: ((date: import("../../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
            formatDate?: ((date: Date) => string) | undefined;
            readonly formatValue?: ((date: import("../../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
            readonly parse?: ((input: string) => import("../../../components/va-date-input/types").DateInputValue) | undefined;
            readonly parseDate?: ((input: string) => Date) | undefined;
            delimiter?: string | undefined;
            rangeDelimiter?: string | undefined;
            ariaToggleDropdownLabel?: string | undefined;
            ariaSelectedDateLabel?: string | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
        };
        VaDatePicker: {
            preset?: string | undefined;
            readonly modelValue?: import("../../../components/va-date-picker/types").DatePickerModelValue;
            stateful?: boolean | undefined;
            type?: import("../../../components/va-date-picker/types").DatePickerType | undefined;
            color?: string | undefined;
            mode?: NonNullable<import("../../../components/va-date-picker/types").DatePickerMode | undefined> | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            readonly view?: import("../../../components/va-date-picker/types").DatePickerView | undefined;
            monthNames?: string[] | undefined;
            ariaNextPeriodLabel?: string | undefined;
            ariaPreviousPeriodLabel?: string | undefined;
            ariaSwitchViewLabel?: string | undefined;
            weekdayNames?: string[] | undefined;
            firstWeekday?: NonNullable<"Monday" | "Sunday" | undefined> | undefined;
            hideWeekDays?: NonNullable<boolean | undefined> | undefined;
            showOtherMonths?: NonNullable<boolean | undefined> | undefined;
            allowedDays?: ((date: Date) => boolean) | undefined;
            weekends?: ((date: Date) => boolean) | undefined;
            highlightWeekend?: NonNullable<boolean | undefined> | undefined;
            highlightToday?: NonNullable<boolean | undefined> | undefined;
            allowedMonths?: ((date: Date) => boolean) | undefined;
            allowedYears?: ((date: Date) => boolean) | undefined;
            startYear?: number | undefined;
            endYear?: number | undefined;
            weekendsColor?: string | undefined;
        };
        VaDivider: {
            preset?: string | undefined;
            inset?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            dashed?: boolean | undefined;
            orientation?: "left" | "center" | "right" | undefined;
        };
        VaDropdown: {
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            target?: import("../../../composables").MaybeHTMLElementOrSelector;
            anchor?: import("../../../composables").MaybeHTMLElementOrSelector;
            ariaLabel?: string | undefined;
            placement?: import("../../../composables").PlacementWithAlias | undefined;
            offset?: import("../../../components/va-dropdown/types").DropdownOffsetProp | undefined;
            role?: import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined;
            disabled?: boolean | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            trigger?: import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined;
            readonly?: boolean | undefined;
            closeOnClickOutside?: boolean | undefined;
            closeOnFocusOutside?: boolean | undefined;
            closeOnAnchorClick?: boolean | undefined;
            closeOnContentClick?: boolean | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: boolean | undefined;
            keepAnchorWidth?: boolean | undefined;
            verticalScrollOnOverflow?: boolean | undefined;
            cursor?: boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined;
            autoPlacement?: boolean | undefined;
            stickToEdges?: boolean | undefined;
            teleport?: import("../../../composables").MaybeHTMLElementOrSelector;
            keyboardNavigation?: boolean | undefined;
        };
        VaDropdownContent: {
            readonly textColor?: string | undefined;
            noPadding?: boolean | undefined;
            background?: string | undefined;
        };
        VaFallback: {
            readonly fallbackSrc?: string | undefined;
            readonly fallbackText?: string | undefined;
            readonly fallbackIcon?: string | undefined;
            readonly fallbackRender?: (() => any) | undefined;
        };
        VaFileUpload: {
            preset?: string | undefined;
            modelValue?: import("../../../components").VaFile | import("../../../components").VaFile[] | undefined;
            type?: "list" | "single" | "gallery" | undefined;
            color?: string | undefined;
            disabled?: boolean | undefined;
            file?: import("../../../components").ConvertedFile | undefined;
            undo?: boolean | undefined;
            dropzone?: boolean | undefined;
            ariaRemoveFileLabel?: string | undefined;
            files?: import("../../../components").VaFile[] | undefined;
            fileTypes?: string | undefined;
            hideFileList?: boolean | undefined;
            undoDuration?: number | undefined;
            undoButtonText?: string | undefined;
            dropZoneText?: string | undefined;
            uploadButtonText?: string | undefined;
            deletedFileMessage?: string | undefined;
        };
        VaForm: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            tag?: string | undefined;
            trigger?: "change" | "blur" | undefined;
            autofocus?: boolean | undefined;
            immediate?: boolean | undefined;
            hideErrors?: boolean | undefined;
            hideErrorMessages?: boolean | undefined;
            hideLoading?: boolean | undefined;
        };
        VaHover: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            disabled?: boolean | undefined;
        };
        VaIcon: {
            preset?: string | undefined;
            readonly color?: string | undefined;
            name?: string | undefined;
            readonly tag?: string | undefined;
            readonly component?: any;
            readonly rotation?: string | number | undefined;
            readonly spin?: string | boolean | undefined;
            flip?: "off" | "horizontal" | "vertical" | "both" | undefined;
            size?: string | number | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
        };
        VaImage: {
            preset?: string | undefined;
            title?: string | undefined;
            ratio?: number | "auto" | undefined;
            maxWidth?: number | undefined;
            fallbackSrc?: string | undefined;
            fallbackText?: string | undefined;
            fallbackIcon?: string | undefined;
            fallbackRender?: (() => any) | undefined;
            readonly src?: string | undefined;
            alt?: string | undefined;
            readonly loading?: "lazy" | "eager" | undefined;
            lazy?: boolean | undefined;
            fit?: "fill" | "none" | "contain" | "cover" | "scale-down" | undefined;
            placeholderSrc?: string | undefined;
            sizes?: string | undefined;
            srcset?: string | undefined;
            draggable?: boolean | undefined;
            readonly crossorigin?: "anonymous" | "use-credentials" | undefined;
            readonly decoding?: "auto" | "sync" | "async" | undefined;
            fetchpriority?: "auto" | "high" | "low" | undefined;
            readonly referrerpolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
        };
        VaInfiniteScroll: {
            reverse?: boolean | undefined;
            preset?: string | undefined;
            tag?: string | undefined;
            offset?: number | undefined;
            disabled?: boolean | undefined;
            readonly load?: Function | undefined;
            scrollTarget?: string | HTMLElement | undefined;
            debounce?: number | undefined;
        };
        VaInnerLoading: {
            preset?: string | undefined;
            readonly color?: string | undefined;
            icon?: string | undefined;
            size?: number | undefined;
            loading?: boolean | undefined;
        };
        VaInput: {
            preset?: string | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            type?: import("../../../utils/types/prop-type").StringWithAutocomplete<"text" | "password"> | undefined;
            color?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            mask?: string | Record<string, number[]> | import("cleave.js/options").CleaveOptions | undefined;
            readonly?: boolean | undefined;
            readonly pattern?: string | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<string>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: boolean | undefined;
            maxLength?: number | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            tabindex?: string | number | undefined;
            inputClass?: string | undefined;
            inputmode?: string | undefined;
            ariaResetLabel?: string | undefined;
            strictBindInputValue?: boolean | undefined;
            returnRaw?: boolean | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            autofocus?: boolean | undefined;
        };
        VaLayout: {
            left?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            right?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            top?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            bottom?: {
                absolute?: boolean | undefined;
                order?: number | undefined;
                fixed?: boolean | undefined;
                overlay?: boolean | undefined;
            } | undefined;
            allowBodyScrollOnOverlay?: boolean | undefined;
        };
        VaInputWrapper: {
            preset?: string | undefined;
            modelValue?: any;
            color?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: boolean | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            readonly?: boolean | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: boolean | undefined;
            counter?: boolean | undefined;
            maxLength?: number | undefined;
            placeholder?: string | undefined;
            readonly background?: string | undefined;
            innerLabel?: boolean | undefined;
            inputAriaLabel?: string | undefined;
            readonly inputAriaLabelledby?: string | undefined;
            readonly inputAriaDescribedby?: string | undefined;
        };
        VaList: {
            preset?: string | undefined;
            fit?: boolean | undefined;
        };
        VaListItem: {
            preset?: string | undefined;
            target?: string | undefined;
            tag?: string | undefined;
            replace?: boolean | undefined;
            disabled?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
        };
        VaListItemLabel: {
            preset?: string | undefined;
            caption?: boolean | undefined;
            lines?: number | undefined;
        };
        VaListItemSection: {
            preset?: string | undefined;
            icon?: boolean | undefined;
            avatar?: boolean | undefined;
        };
        VaListLabel: {
            preset?: string | undefined;
            color?: string | undefined;
        };
        VaListSeparator: {
            preset?: string | undefined;
            fit?: boolean | undefined;
            spaced?: boolean | undefined;
        };
        VaMessageList: {
            modelValue?: string | string[] | undefined;
            readonly color?: string | undefined;
            limit?: number | undefined;
            hasError?: boolean | undefined;
        };
        VaModal: {
            modelValue?: boolean | undefined;
            stateful?: boolean | undefined;
            title?: string | undefined;
            maxWidth?: string | undefined;
            size?: import("../../../utils/types/prop-type").StringWithAutocomplete<"auto" | "small" | "medium" | "large"> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            attachElement?: string | undefined;
            allowBodyScroll?: boolean | undefined;
            disableAttachment?: boolean | undefined;
            message?: string | undefined;
            okText?: string | undefined;
            cancelText?: string | undefined;
            hideDefaultActions?: boolean | undefined;
            fullscreen?: boolean | undefined;
            closeButton?: boolean | undefined;
            mobileFullscreen?: boolean | undefined;
            noDismiss?: boolean | undefined;
            noOutsideDismiss?: boolean | undefined;
            noEscDismiss?: boolean | undefined;
            maxHeight?: string | undefined;
            readonly anchorClass?: string | undefined;
            fixedLayout?: boolean | undefined;
            withoutTransitions?: boolean | undefined;
            overlay?: boolean | undefined;
            overlayOpacity?: string | number | undefined;
            showNestedOverlay?: boolean | undefined;
            blur?: boolean | undefined;
            zIndex?: string | number | undefined;
            backgroundColor?: string | undefined;
            noPadding?: boolean | undefined;
            readonly beforeClose?: ((hide: () => void) => any) | undefined;
            readonly beforeOk?: ((hide: () => void) => any) | undefined;
            readonly beforeCancel?: ((hide: () => void) => any) | undefined;
            ariaCloseLabel?: string | undefined;
        };
        VaNavbar: {
            preset?: string | undefined;
            bottom?: boolean | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            hideOnScroll?: boolean | undefined;
            fixed?: boolean | undefined;
            bordered?: boolean | undefined;
            shape?: boolean | undefined;
            shadowed?: boolean | undefined;
        };
        VaNavbarItem: {};
        VaOptionList: {
            preset?: string | undefined;
            readonly modelValue?: import("../../../components").SelectOption | import("../../../components").SelectOption[];
            stateful?: boolean | undefined;
            type?: "switch" | "checkbox" | "radio" | undefined;
            color?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            options?: import("../../../components").SelectOption[] | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            textBy?: import("../../../composables").StringOrFunction | undefined;
            valueBy?: import("../../../composables").StringOrFunction | undefined;
            trackBy?: import("../../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../../composables").StringOrFunction | undefined;
            groupBy?: import("../../../composables").StringOrFunction | undefined;
            leftLabel?: boolean | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            readonly defaultValue?: import("../../../components").SelectOption | import("../../../components").SelectOption[];
        };
        VaPagination: {
            preset?: string | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            borderColor?: string | undefined;
            size?: "small" | "medium" | "large" | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            input?: boolean | undefined;
            rounded?: boolean | undefined;
            visiblePages?: number | undefined;
            pages?: number | undefined;
            boundaryLinks?: boolean | undefined;
            boundaryNumbers?: boolean | undefined;
            directionLinks?: boolean | undefined;
            hideOnSinglePage?: boolean | undefined;
            total?: number | undefined;
            pageSize?: number | undefined;
            boundaryIconLeft?: string | undefined;
            boundaryIconRight?: string | undefined;
            directionIconLeft?: string | undefined;
            directionIconRight?: string | undefined;
            gapped?: boolean | undefined;
            activePageColor?: string | undefined;
            activeButtonProps?: NonNullable<Partial<{
                preset: string;
                type: string;
                target: string;
                color: string;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                size: "small" | "medium" | "large";
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                replace: boolean;
                loading: boolean;
                disabled: boolean;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                block: boolean;
                textOpacity: number;
                backgroundOpacity: number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly type: string;
                readonly color: string;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly size: "small" | "medium" | "large";
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly disabled: boolean;
                readonly block: boolean;
                readonly textOpacity: number;
                readonly backgroundOpacity: number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: number;
                readonly hoverMaskColor: string;
                readonly preset?: string | undefined;
                readonly target?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                backgroundOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../types").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../types").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "preset" | "type" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "size" | "sizesConfig" | "fontSizesConfig" | "replace" | "loading" | "disabled" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "block" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            buttonProps?: NonNullable<Partial<{
                preset: string;
                type: string;
                target: string;
                color: string;
                textColor: string;
                icon: string;
                borderColor: string;
                gradient: boolean;
                tag: string;
                size: "small" | "medium" | "large";
                sizesConfig: Record<string, any>;
                fontSizesConfig: Record<string, any>;
                replace: boolean;
                loading: boolean;
                disabled: boolean;
                to: string | Record<string, any>;
                append: boolean;
                exact: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                block: boolean;
                textOpacity: number;
                backgroundOpacity: number;
                plain: boolean;
                round: boolean;
                iconRight: string;
                iconColor: string;
                pressedBehavior: "opacity" | "mask";
                pressedOpacity: number;
                pressedMaskColor: string;
                hoverBehavior: "opacity" | "mask";
                hoverOpacity: number;
                hoverMaskColor: string;
            }> & Omit<{
                readonly type: string;
                readonly color: string;
                readonly textColor: string;
                readonly icon: string;
                readonly borderColor: string;
                readonly gradient: boolean;
                readonly tag: string;
                readonly size: "small" | "medium" | "large";
                readonly sizesConfig: Record<string, any>;
                readonly fontSizesConfig: Record<string, any>;
                readonly loading: boolean;
                readonly disabled: boolean;
                readonly block: boolean;
                readonly textOpacity: number;
                readonly backgroundOpacity: number;
                readonly plain: boolean;
                readonly round: boolean;
                readonly iconRight: string;
                readonly iconColor: string;
                readonly pressedBehavior: "opacity" | "mask";
                readonly pressedOpacity: number;
                readonly pressedMaskColor: string;
                readonly hoverBehavior: "opacity" | "mask";
                readonly hoverOpacity: number;
                readonly hoverMaskColor: string;
                readonly preset?: string | undefined;
                readonly target?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly to?: string | Record<string, any> | undefined;
                readonly append?: boolean | undefined;
                readonly exact?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                type: {
                    type: StringConstructor;
                    default: string;
                };
                block: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: string;
                };
                textColor: {
                    type: StringConstructor;
                    default: string;
                };
                textOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                backgroundOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                borderColor: {
                    type: StringConstructor;
                    default: string;
                };
                gradient: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                plain: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                round: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                size: {
                    type: import("vue").PropType<"small" | "medium" | "large">;
                    default: string;
                    validator: (v: string) => boolean;
                };
                icon: {
                    type: StringConstructor;
                    default: string;
                };
                iconRight: {
                    type: StringConstructor;
                    default: string;
                };
                iconColor: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<string | Record<string, any>>;
                    default: undefined;
                };
                replace: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                append: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                exact: {
                    type: BooleanConstructor;
                    default: undefined;
                };
                activeClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: undefined;
                };
                href: {
                    type: StringConstructor;
                    default: undefined;
                };
                target: {
                    type: StringConstructor;
                    default: undefined;
                };
                loading: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                pressedBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                pressedOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                pressedMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                hoverBehavior: {
                    type: import("vue").PropType<"opacity" | "mask">;
                    default: string;
                    validator: (value: string) => boolean;
                };
                hoverOpacity: {
                    type: NumberConstructor;
                    default: number;
                };
                hoverMaskColor: {
                    type: StringConstructor;
                    default: string;
                };
                sizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../types").SizeConfig;
                };
                fontSizesConfig: {
                    type: import("vue").PropType<Record<string, any>>;
                    default: () => import("../types").SizeConfig;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
            }>>, "preset" | "type" | "target" | "color" | "textColor" | "icon" | "borderColor" | "gradient" | "tag" | "size" | "sizesConfig" | "fontSizesConfig" | "replace" | "loading" | "disabled" | "to" | "append" | "exact" | "activeClass" | "exactActiveClass" | "href" | "block" | "textOpacity" | "backgroundOpacity" | "plain" | "round" | "iconRight" | "iconColor" | "pressedBehavior" | "pressedOpacity" | "pressedMaskColor" | "hoverBehavior" | "hoverOpacity" | "hoverMaskColor">> | undefined;
            buttonsPreset?: string | undefined;
            ariaGoToTheFirstPageLabel?: string | undefined;
            ariaGoToPreviousPageLabel?: string | undefined;
            ariaGoToSpecificPageLabel?: string | undefined;
            ariaGoToSpecificPageInputLabel?: string | undefined;
            ariaGoToNextPageLabel?: string | undefined;
            ariaGoToLastPageLabel?: string | undefined;
        };
        VaParallax: {
            preset?: string | undefined;
            readonly target?: string | HTMLElement | undefined;
            src?: string | undefined;
            alt?: string | undefined;
            speed?: number | undefined;
            height?: number | undefined;
            reversed?: boolean | undefined;
        };
        VaPopover: {
            preset?: string | undefined;
            modelValue?: NonNullable<boolean | undefined> | undefined;
            stateful?: NonNullable<boolean | undefined> | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            title?: string | undefined;
            icon?: string | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            message?: string | undefined;
            ariaLabel?: string | undefined;
            placement?: NonNullable<import("../../../composables").PlacementWithAlias | undefined> | undefined;
            offset?: number | [number, number] | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            autoHide?: boolean | undefined;
        };
        VaProgressBar: {
            reverse?: boolean | undefined;
            preset?: string | undefined;
            modelValue?: number | undefined;
            color?: string | undefined;
            size?: string | number | undefined;
            max?: number | undefined;
            ariaLabel?: string | undefined;
            indeterminate?: boolean | undefined;
            rounded?: boolean | undefined;
            buffer?: number | undefined;
            contentInside?: boolean | undefined;
            showPercent?: boolean | undefined;
        };
        VaProgressCircle: {
            preset?: string | undefined;
            modelValue?: number | undefined;
            color?: string | undefined;
            size?: string | number | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            ariaLabel?: string | undefined;
            indeterminate?: boolean | undefined;
            thickness?: number | undefined;
        };
        VaRadio: {
            preset?: string | undefined;
            modelValue?: any;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: boolean | undefined;
            options?: any[] | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            readonly?: boolean | undefined;
            option?: any;
            textBy?: import("../../../composables").StringOrFunction | undefined;
            valueBy?: import("../../../composables").StringOrFunction | undefined;
            trackBy?: import("../../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../../composables").StringOrFunction | undefined;
            groupBy?: import("../../../composables").StringOrFunction | undefined;
            indeterminate?: boolean | undefined;
            indeterminateValue?: null | undefined;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
        };
        VaRating: {
            preset?: string | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            icon?: string | undefined;
            size?: NonNullable<string | number | undefined> | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            max?: number | undefined;
            ariaLabel?: string | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            hover?: NonNullable<boolean | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            tabindex?: NonNullable<string | number | undefined> | undefined;
            clearable?: boolean | undefined;
            unselectedColor?: string | undefined;
            halfIcon?: string | undefined;
            emptyIcon?: string | undefined;
            halves?: boolean | undefined;
            numbers?: boolean | undefined;
            texts?: string[] | undefined;
            ariaItemLabel?: string | undefined;
        };
        VaSelect: {
            preset?: string | undefined;
            modelValue?: import("../../../components").SelectOption | import("../../../components").SelectOption[];
            multiple?: boolean | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            color?: string | undefined;
            name?: string | undefined;
            search?: string | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            success?: boolean | undefined;
            maxHeight?: string | undefined;
            error?: boolean | undefined;
            loading?: boolean | undefined;
            options?: import("../../../components").SelectOption[] | undefined;
            ariaLabel?: string | undefined;
            placement?: NonNullable<import("../../../composables").PlacementWithAlias | undefined> | undefined;
            offset?: NonNullable<import("../../../components/va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            separator?: string | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            label?: string | undefined;
            anchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            width?: string | undefined;
            textBy?: import("../../../composables").StringOrFunction | undefined;
            valueBy?: import("../../../composables").StringOrFunction | undefined;
            trackBy?: import("../../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../../composables").StringOrFunction | undefined;
            groupBy?: import("../../../composables").StringOrFunction | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<import("../../../components").SelectOption>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: number | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            tabindex?: string | number | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: string | undefined;
            autocomplete?: boolean | undefined;
            virtualScroller?: boolean | undefined;
            delay?: number | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
            allowCreate?: boolean | "unique" | undefined;
            searchable?: boolean | undefined;
            noOptionsText?: string | undefined;
            hideSelected?: boolean | undefined;
            selectedTopShown?: boolean | undefined;
            highlightMatchedText?: boolean | undefined;
            minSearchChars?: number | undefined;
            autoSelectFirstOption?: boolean | undefined;
            searchPlaceholderText?: string | undefined;
            ariaSearchLabel?: string | undefined;
            ariaClearLabel?: string | undefined;
            dropdownIcon?: string | import("../../../components").SelectDropdownIcon | undefined;
            maxVisibleOptions?: number | undefined;
            maxSelections?: string | number | undefined;
        };
        VaSeparator: {};
        VaSkeleton: {
            color?: string | undefined;
            tag?: string | undefined;
            ariaLabel?: string | undefined;
            width?: string | undefined;
            height?: string | undefined;
            delay?: number | undefined;
            lines?: string | number | undefined;
            animation?: "none" | "pulse" | "wave" | undefined;
            lineGap?: string | undefined;
            lastLineWidth?: string | undefined;
            variant?: "text" | "circle" | "rounded" | "squared" | undefined;
        };
        VaSkeletonGroup: {
            color?: string | undefined;
            delay?: number | undefined;
            lines?: number | undefined;
            animation?: "none" | "pulse" | "wave" | undefined;
            lineGap?: string | undefined;
            lastLineWidth?: string | undefined;
        };
        VaSidebar: {
            preset?: string | undefined;
            modelValue?: boolean | undefined;
            color?: string | undefined;
            readonly textColor?: string | undefined;
            borderColor?: string | undefined;
            gradient?: boolean | undefined;
            activeColor?: string | undefined;
            hoverOpacity?: number | undefined;
            closeOnClickOutside?: boolean | undefined;
            width?: string | undefined;
            hoverable?: boolean | undefined;
            animated?: string | boolean | undefined;
            hoverColor?: string | undefined;
            minimized?: boolean | undefined;
            minimizedWidth?: string | undefined;
        };
        VaSidebarItem: {
            preset?: string | undefined;
            target?: string | undefined;
            textColor?: string | undefined;
            borderColor?: string | undefined;
            tag?: string | undefined;
            replace?: boolean | undefined;
            activeColor?: string | undefined;
            disabled?: boolean | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            hoverOpacity?: string | number | undefined;
            hoverColor?: string | undefined;
            active?: boolean | undefined;
        };
        VaSidebarItemContent: {};
        VaSidebarItemTitle: {};
        VaSlider: {
            preset?: string | undefined;
            modelValue?: number | number[] | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            max?: number | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            readonly?: boolean | undefined;
            min?: number | undefined;
            step?: number | undefined;
            range?: boolean | undefined;
            readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
            trackColor?: string | undefined;
            labelColor?: string | undefined;
            trackLabelVisible?: boolean | undefined;
            invertLabel?: boolean | undefined;
            pins?: boolean | undefined;
            iconPrepend?: string | undefined;
            iconAppend?: string | undefined;
            showTrack?: boolean | undefined;
        };
        VaSpacer: {};
        VaSplit: {
            preset?: string | undefined;
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            vertical?: boolean | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            maximization?: boolean | undefined;
            maximizeStart?: boolean | undefined;
            limits?: [import("../../../components/va-split/types").SplitLimit, import("../../../components/va-split/types").SplitLimit] | undefined;
            snapping?: import("../../../components/va-split/types").SnappingMark[] | undefined;
            snappingRange?: string | number | undefined;
        };
        VaSwitch: {
            preset?: string | undefined;
            modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            name?: string | undefined;
            size?: "small" | "medium" | "large" | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: boolean | undefined;
            ariaLabel?: string | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            readonly?: boolean | undefined;
            indeterminate?: boolean | undefined;
            indeterminateValue?: null | undefined;
            id?: string | undefined;
            arrayValue?: string | number | boolean | Record<string, any> | undefined;
            leftLabel?: boolean | undefined;
            trueValue?: any;
            falseValue?: any;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            trueLabel?: string | undefined;
            falseLabel?: string | undefined;
            trueInnerLabel?: string | undefined;
            falseInnerLabel?: string | undefined;
            offColor?: string | undefined;
        };
        VaTabs: {
            left?: boolean | undefined;
            center?: boolean | undefined;
            right?: boolean | undefined;
            preset?: string | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            disabled?: boolean | undefined;
            grow?: boolean | undefined;
            hidePagination?: boolean | undefined;
            hideSlider?: boolean | undefined;
            prevIcon?: string | undefined;
            nextIcon?: string | undefined;
            ariaMoveRightLabel?: string | undefined;
            ariaMoveLeftLabel?: string | undefined;
        };
        VaTab: {
            preset?: string | undefined;
            target?: string | undefined;
            color?: string | undefined;
            icon?: string | undefined;
            readonly name?: string | number | undefined;
            tag?: string | undefined;
            replace?: boolean | undefined;
            disabled?: boolean | undefined;
            label?: string | undefined;
            to?: string | Record<string, any> | undefined;
            append?: boolean | undefined;
            exact?: boolean | undefined;
            activeClass?: string | undefined;
            exactActiveClass?: string | undefined;
            href?: string | undefined;
            selected?: boolean | undefined;
        };
        VaStepper: {
            modelValue?: number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            vertical?: boolean | undefined;
            ariaLabel?: string | undefined;
            linear?: boolean | undefined;
            steps?: import("../../../components/va-stepper/types").Step[] | undefined;
            navigationDisabled?: boolean | undefined;
            controlsHidden?: boolean | undefined;
            nextDisabled?: boolean | undefined;
            finishButtonHidden?: boolean | undefined;
        };
        VaTimeInput: {
            preset?: string | undefined;
            modelValue?: Date | undefined;
            stateful?: boolean | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            color?: string | undefined;
            icon?: string | undefined;
            name?: string | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            ariaLabel?: string | undefined;
            placement?: NonNullable<import("../../../composables").PlacementWithAlias | undefined> | undefined;
            offset?: NonNullable<import("../../../components/va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            label?: string | undefined;
            anchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: boolean | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: NonNullable<boolean | undefined> | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            view?: NonNullable<"hours" | "minutes" | "seconds" | undefined> | undefined;
            leftIcon?: boolean | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<Date>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            ariaResetLabel?: string | undefined;
            clearable?: boolean | undefined;
            clearableIcon?: string | undefined;
            clearValue?: Date | undefined;
            manualInput?: boolean | undefined;
            readonly format?: ((date?: Date | undefined) => string) | undefined;
            readonly parse?: ((input: string) => Date) | undefined;
            ariaToggleDropdownLabel?: string | undefined;
            closeOnChange?: boolean | undefined;
            isOpen?: boolean | undefined;
            ampm?: NonNullable<boolean | undefined> | undefined;
            hidePeriodSwitch?: NonNullable<boolean | undefined> | undefined;
            periodUpdatesModelValue?: NonNullable<boolean | undefined> | undefined;
            hoursFilter?: ((h: number) => boolean) | undefined;
            minutesFilter?: ((h: number) => boolean) | undefined;
            secondsFilter?: ((h: number) => boolean) | undefined;
            framed?: NonNullable<boolean | undefined> | undefined;
            cellHeight?: number | undefined;
            visibleCellsCount?: number | undefined;
        };
        VaTimeline: {};
        VaTimelineItem: {
            preset?: string | undefined;
            color?: string | undefined;
            vertical?: NonNullable<boolean | undefined> | undefined;
            active?: NonNullable<boolean | undefined> | undefined;
            activePrevious?: NonNullable<boolean | undefined> | undefined;
            activeNext?: NonNullable<boolean | undefined> | undefined;
            isFirst?: boolean | undefined;
            isLast?: boolean | undefined;
            inverted?: boolean | undefined;
        };
        VaTimePicker: {
            preset?: string | undefined;
            readonly modelValue?: Date | undefined;
            stateful?: boolean | undefined;
            disabled?: boolean | undefined;
            readonly?: boolean | undefined;
            view?: "hours" | "minutes" | "seconds" | undefined;
            ampm?: boolean | undefined;
            hidePeriodSwitch?: boolean | undefined;
            periodUpdatesModelValue?: boolean | undefined;
            readonly hoursFilter?: ((h: number) => boolean) | undefined;
            readonly minutesFilter?: ((h: number) => boolean) | undefined;
            readonly secondsFilter?: ((h: number) => boolean) | undefined;
            framed?: boolean | undefined;
            cellHeight?: number | undefined;
            visibleCellsCount?: number | undefined;
        };
        VaToast: {
            preset?: string | undefined;
            color?: string | undefined;
            title?: string | undefined;
            icon?: string | undefined;
            closeable?: boolean | undefined;
            readonly render?: Function | undefined;
            message?: string | Function | undefined;
            ariaCloseLabel?: string | undefined;
            multiLine?: boolean | undefined;
            role?: import("../../../utils/types/prop-type").StringWithAutocomplete<"alert" | "alertdialog" | "status"> | undefined;
            position?: import("../../../components").ToastPosition | undefined;
            inline?: boolean | undefined;
            offsetY?: number | undefined;
            offsetX?: number | undefined;
            dangerouslyUseHtmlString?: boolean | undefined;
            customClass?: string | undefined;
            duration?: number | undefined;
        };
        VaTreeView: {
            filter?: string | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            textBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            valueBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            trackBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            disabledBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            checked?: (string | number | import("../../../components").TreeNode)[] | undefined;
            selectable?: boolean | undefined;
            filterMethod?: import("../../../components/va-tree-view/types").TreeViewFilterMethod | undefined;
            expanded?: (string | number | import("../../../components").TreeNode)[] | undefined;
            nodes?: import("../../../components").TreeNode[] | undefined;
            selectionType?: string | undefined;
            iconBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            expandedBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            checkedBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            childrenBy?: import("../../../components/va-tree-view/types").TreeViewPropKey | undefined;
            expandAll?: boolean | undefined;
            expandNodeBy?: "leaf" | "node" | undefined;
        };
        VaScrollContainer: {
            color?: string | undefined;
            gradient?: boolean | undefined;
            horizontal?: boolean | undefined;
            vertical?: boolean | undefined;
            size?: "small" | "medium" | "large" | undefined;
            sizesConfig?: Record<string, any> | undefined;
            fontSizesConfig?: Record<string, any> | undefined;
            rtl?: boolean | undefined;
        };
        VaViewer: {};
        VaValue: {
            defaultValue?: any;
        };
        VaVirtualScroller: {};
        VaTextarea: {
            preset?: string | undefined;
            modelValue?: string | number | undefined;
            stateful?: boolean | undefined;
            color?: string | undefined;
            name?: string | undefined;
            success?: boolean | undefined;
            error?: boolean | undefined;
            loading?: NonNullable<boolean | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            label?: string | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            dirty?: boolean | undefined;
            errorMessages?: string | string[] | undefined;
            errorCount?: string | number | undefined;
            rules?: import("../../../composables").ValidationRule<any>[] | undefined;
            messages?: string | string[] | undefined;
            immediateValidation?: boolean | undefined;
            requiredMark?: NonNullable<boolean | undefined> | undefined;
            counter?: NonNullable<boolean | undefined> | undefined;
            maxLength?: number | undefined;
            readonly placeholder?: string | undefined;
            background?: string | undefined;
            innerLabel?: NonNullable<boolean | undefined> | undefined;
            inputAriaLabel?: string | undefined;
            inputAriaLabelledby?: string | undefined;
            inputAriaDescribedby?: string | undefined;
            clearValue?: string | undefined;
            autosize?: boolean | undefined;
            minRows?: string | number | undefined;
            readonly maxRows?: string | number | undefined;
            resize?: boolean | undefined;
        };
        VaMenu: {
            preset?: string | undefined;
            modelValue?: NonNullable<boolean | undefined> | undefined;
            stateful?: NonNullable<boolean | undefined> | undefined;
            target?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            anchor?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            options?: import("../../../components/va-menu-list/types").VaMenuOption[] | undefined;
            ariaLabel?: string | undefined;
            placement?: NonNullable<import("../../../composables").PlacementWithAlias | undefined> | undefined;
            offset?: NonNullable<import("../../../components/va-dropdown/types").DropdownOffsetProp | undefined> | undefined;
            role?: NonNullable<import("../../../utils/types/prop-type").StringWithAutocomplete<"button" | "none"> | undefined> | undefined;
            disabled?: NonNullable<boolean | undefined> | undefined;
            anchorSelector?: string | undefined;
            innerAnchorSelector?: string | undefined;
            trigger?: NonNullable<import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger | readonly import("../../../components/va-dropdown/hooks/useDropdownNavigation").Trigger[] | undefined> | undefined;
            readonly?: NonNullable<boolean | undefined> | undefined;
            closeOnClickOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnFocusOutside?: NonNullable<boolean | undefined> | undefined;
            closeOnAnchorClick?: NonNullable<boolean | undefined> | undefined;
            closeOnContentClick?: NonNullable<boolean | undefined> | undefined;
            hoverOverTimeout?: number | undefined;
            hoverOutTimeout?: number | undefined;
            isContentHoverable?: NonNullable<boolean | undefined> | undefined;
            keepAnchorWidth?: NonNullable<boolean | undefined> | undefined;
            verticalScrollOnOverflow?: NonNullable<boolean | undefined> | undefined;
            cursor?: NonNullable<boolean | import("../../../components/va-dropdown/types").CursorAnchor | undefined> | undefined;
            autoPlacement?: NonNullable<boolean | undefined> | undefined;
            stickToEdges?: boolean | undefined;
            teleport?: NonNullable<import("../../../composables").MaybeHTMLElementOrSelector> | undefined;
            keyboardNavigation?: NonNullable<boolean | undefined> | undefined;
            textBy?: NonNullable<import("../../../composables").StringOrFunction | undefined> | undefined;
            valueBy?: NonNullable<import("../../../composables").StringOrFunction | undefined> | undefined;
            trackBy?: NonNullable<import("../../../composables").StringOrFunction | undefined> | undefined;
            disabledBy?: NonNullable<import("../../../composables").StringOrFunction | undefined> | undefined;
            groupBy?: NonNullable<import("../../../composables").StringOrFunction | undefined> | undefined;
        };
        VaMenuList: {
            options?: import("../../../components/va-menu-list/types").VaMenuOption[] | undefined;
            textBy?: import("../../../composables").StringOrFunction | undefined;
            valueBy?: import("../../../composables").StringOrFunction | undefined;
            trackBy?: import("../../../composables").StringOrFunction | undefined;
            disabledBy?: import("../../../composables").StringOrFunction | undefined;
            groupBy?: import("../../../composables").StringOrFunction | undefined;
        };
        VaMenuItem: {
            readonly icon?: string | undefined;
            name?: string | undefined;
            disabled?: boolean | undefined;
            readonly rightIcon?: string | undefined;
        };
        VaMenuGroup: {
            color?: string | undefined;
            readonly groupName?: string | undefined;
        };
    } & {
        all: import("../../component-config").Props;
        presets: import("../../component-config").Presets;
    }> | undefined;
    breakpoint?: {
        enabled?: boolean | undefined;
        bodyClass?: boolean | undefined;
        thresholds?: {
            xs?: number | undefined;
            sm?: number | undefined;
            md?: number | undefined;
            lg?: number | undefined;
            xl?: number | undefined;
        } | undefined;
    } | undefined;
    i18n?: {
        search?: string | undefined;
        noOptions?: string | undefined;
        ok?: string | undefined;
        cancel?: string | undefined;
        uploadFile?: string | undefined;
        undo?: string | undefined;
        dropzone?: string | undefined;
        fileDeleted?: string | undefined;
        closeAlert?: string | undefined;
        backToTop?: string | undefined;
        toggleDropdown?: string | undefined;
        carousel?: string | undefined;
        goPreviousSlide?: string | undefined;
        goNextSlide?: string | undefined;
        goSlide?: string | undefined;
        slideOf?: string | undefined;
        close?: string | undefined;
        openColorPicker?: string | undefined;
        colorSelection?: string | undefined;
        colorName?: string | undefined;
        decreaseCounter?: string | undefined;
        increaseCounter?: string | undefined;
        selectAllRows?: string | undefined;
        sortColumnBy?: string | undefined;
        selectRowByIndex?: string | undefined;
        resetDate?: string | undefined;
        nextPeriod?: string | undefined;
        switchView?: string | undefined;
        previousPeriod?: string | undefined;
        removeFile?: string | undefined;
        reset?: string | undefined;
        pagination?: string | undefined;
        goToTheFirstPage?: string | undefined;
        goToPreviousPage?: string | undefined;
        goToSpecificPage?: string | undefined;
        goToSpecificPageInput?: string | undefined;
        goNextPage?: string | undefined;
        goLastPage?: string | undefined;
        currentRating?: string | undefined;
        voteRating?: string | undefined;
        optionsFilter?: string | undefined;
        splitPanels?: string | undefined;
        movePaginationLeft?: string | undefined;
        movePaginationRight?: string | undefined;
        resetTime?: string | undefined;
        closeToast?: string | undefined;
        selectedOption?: string | undefined;
        noSelectedOption?: string | undefined;
        breadcrumbs?: string | undefined;
        counterValue?: string | undefined;
        selectedDate?: string | undefined;
        selectedTime?: string | undefined;
        progressState?: string | undefined;
        color?: string | undefined;
        next?: string | undefined;
        back?: string | undefined;
        finish?: string | undefined;
        step?: string | undefined;
        progress?: string | undefined;
        loading?: string | undefined;
        sliderValue?: string | undefined;
        switch?: string | undefined;
        inputField?: string | undefined;
    } | undefined;
    colorsClasses?: ({
        prefix?: string | undefined;
        postfix?: string | undefined;
        property?: string | (string | undefined)[] | undefined;
        value?: string | undefined;
    } | undefined)[] | undefined;
    routerComponent?: {
        [x: string]: any;
        setup?: {} | undefined;
        name?: string | undefined;
        template?: string | object | undefined;
        render?: {
            apply?: {} | undefined;
            call?: {} | undefined;
            bind?: {} | undefined;
            toString?: {} | undefined;
            prototype?: any;
            readonly length?: number | undefined;
            arguments?: any;
            caller?: any | undefined;
            readonly name?: string | undefined;
            [Symbol.hasInstance]?: {} | undefined;
        } | undefined;
        components?: Record<string, import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>> | undefined;
        directives?: {
            [x: string]: {
                created?: {} | undefined;
                beforeMount?: {} | undefined;
                mounted?: {} | undefined;
                beforeUpdate?: {} | undefined;
                updated?: {} | undefined;
                beforeUnmount?: {} | undefined;
                unmounted?: {} | undefined;
                getSSRProps?: {} | undefined;
                deep?: boolean | undefined;
            } | {} | undefined;
        } | undefined;
        inheritAttrs?: boolean | undefined;
        emits?: any;
        slots?: {} | undefined;
        expose?: (string | undefined)[] | undefined;
        serverPrefetch?: {} | undefined;
        compilerOptions?: {
            isCustomElement?: {} | undefined;
            whitespace?: "preserve" | "condense" | undefined;
            comments?: boolean | undefined;
            delimiters?: [(string | undefined)?, (string | undefined)?] | undefined;
        } | undefined;
        call?: {} | undefined;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
        __defaults?: any;
        compatConfig?: {
            GLOBAL_MOUNT?: boolean | "suppress-warning" | undefined;
            GLOBAL_MOUNT_CONTAINER?: boolean | "suppress-warning" | undefined;
            GLOBAL_EXTEND?: boolean | "suppress-warning" | undefined;
            GLOBAL_PROTOTYPE?: boolean | "suppress-warning" | undefined;
            GLOBAL_SET?: boolean | "suppress-warning" | undefined;
            GLOBAL_DELETE?: boolean | "suppress-warning" | undefined;
            GLOBAL_OBSERVABLE?: boolean | "suppress-warning" | undefined;
            GLOBAL_PRIVATE_UTIL?: boolean | "suppress-warning" | undefined;
            CONFIG_SILENT?: boolean | "suppress-warning" | undefined;
            CONFIG_DEVTOOLS?: boolean | "suppress-warning" | undefined;
            CONFIG_KEY_CODES?: boolean | "suppress-warning" | undefined;
            CONFIG_PRODUCTION_TIP?: boolean | "suppress-warning" | undefined;
            CONFIG_IGNORED_ELEMENTS?: boolean | "suppress-warning" | undefined;
            CONFIG_WHITESPACE?: boolean | "suppress-warning" | undefined;
            CONFIG_OPTION_MERGE_STRATS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SET?: boolean | "suppress-warning" | undefined;
            INSTANCE_DELETE?: boolean | "suppress-warning" | undefined;
            INSTANCE_DESTROY?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_EMITTER?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_HOOKS?: boolean | "suppress-warning" | undefined;
            INSTANCE_CHILDREN?: boolean | "suppress-warning" | undefined;
            INSTANCE_LISTENERS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SCOPED_SLOTS?: boolean | "suppress-warning" | undefined;
            INSTANCE_ATTRS_CLASS_STYLE?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_FN?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_MERGE?: boolean | "suppress-warning" | undefined;
            OPTIONS_BEFORE_DESTROY?: boolean | "suppress-warning" | undefined;
            OPTIONS_DESTROYED?: boolean | "suppress-warning" | undefined;
            WATCH_ARRAY?: boolean | "suppress-warning" | undefined;
            PROPS_DEFAULT_THIS?: boolean | "suppress-warning" | undefined;
            V_ON_KEYCODE_MODIFIER?: boolean | "suppress-warning" | undefined;
            CUSTOM_DIR?: boolean | "suppress-warning" | undefined;
            ATTR_FALSE_VALUE?: boolean | "suppress-warning" | undefined;
            ATTR_ENUMERATED_COERCION?: boolean | "suppress-warning" | undefined;
            TRANSITION_CLASSES?: boolean | "suppress-warning" | undefined;
            TRANSITION_GROUP_ROOT?: boolean | "suppress-warning" | undefined;
            COMPONENT_ASYNC?: boolean | "suppress-warning" | undefined;
            COMPONENT_FUNCTIONAL?: boolean | "suppress-warning" | undefined;
            COMPONENT_V_MODEL?: boolean | "suppress-warning" | undefined;
            RENDER_FUNCTION?: boolean | "suppress-warning" | undefined;
            FILTERS?: boolean | "suppress-warning" | undefined;
            PRIVATE_APIS?: boolean | "suppress-warning" | undefined;
            MODE?: 2 | 3 | {} | undefined;
        } | undefined;
        data?: {} | undefined;
        computed?: {
            [x: string]: {} | {
                get?: {} | undefined;
                set?: {} | undefined;
            } | undefined;
        } | undefined;
        methods?: {
            [x: string]: {
                apply?: {} | undefined;
                call?: {} | undefined;
                bind?: {} | undefined;
                toString?: {} | undefined;
                prototype?: any;
                readonly length?: number | undefined;
                arguments?: any;
                caller?: any | undefined;
                readonly name?: string | undefined;
                [Symbol.hasInstance]?: {} | undefined;
            } | undefined;
        } | undefined;
        watch?: {
            [x: string]: string | {} | {
                handler?: string | {} | undefined;
                immediate?: boolean | undefined;
                deep?: boolean | undefined;
                flush?: "pre" | "sync" | "post" | undefined;
                onTrack?: {} | undefined;
                onTrigger?: {} | undefined;
            } | (string | {} | {
                handler?: string | {} | undefined;
                immediate?: boolean | undefined;
                deep?: boolean | undefined;
                flush?: "pre" | "sync" | "post" | undefined;
                onTrack?: {} | undefined;
                onTrigger?: {} | undefined;
            } | undefined)[] | undefined;
        } | undefined;
        provide?: {
            apply?: {} | undefined;
            call?: {} | undefined;
            bind?: {} | undefined;
            toString?: {} | undefined;
            prototype?: any;
            readonly length?: number | undefined;
            arguments?: any;
            caller?: any | undefined;
            readonly name?: string | undefined;
            [Symbol.hasInstance]?: {} | undefined;
        } | {
            [x: string]: unknown;
            [x: symbol]: unknown;
        } | undefined;
        inject?: (string | undefined)[] | {} | undefined;
        filters?: {
            [x: string]: {
                apply?: {} | undefined;
                call?: {} | undefined;
                bind?: {} | undefined;
                toString?: {} | undefined;
                prototype?: any;
                readonly length?: number | undefined;
                arguments?: any;
                caller?: any | undefined;
                readonly name?: string | undefined;
                [Symbol.hasInstance]?: {} | undefined;
            } | undefined;
        } | undefined;
        mixins?: any[] | undefined;
        extends?: any;
        beforeCreate?: {} | undefined;
        created?: {} | undefined;
        beforeMount?: {} | undefined;
        mounted?: {} | undefined;
        beforeUpdate?: {} | undefined;
        updated?: {} | undefined;
        activated?: {} | undefined;
        deactivated?: {} | undefined;
        beforeDestroy?: {} | undefined;
        beforeUnmount?: {} | undefined;
        destroyed?: {} | undefined;
        unmounted?: {} | undefined;
        renderTracked?: {} | undefined;
        renderTriggered?: {} | undefined;
        errorCaptured?: {} | undefined;
        delimiters?: [(string | undefined)?, (string | undefined)?] | undefined;
        __differentiator?: string | number | symbol | undefined;
        __isBuiltIn?: boolean | undefined;
        __file?: string | undefined;
        __name?: string | undefined;
    } | {
        props?: (string | undefined)[] | {
            [x: string]: {} | {} | {
                readonly prototype?: any;
            } | ({} | {} | {
                readonly prototype?: any;
            } | undefined)[] | {
                type?: true | {} | {} | {
                    readonly prototype?: any;
                } | ({} | {} | {
                    readonly prototype?: any;
                } | undefined)[] | null | undefined;
                required?: boolean | undefined;
                default?: any;
                validator?: {} | undefined;
            } | null | undefined;
        } | undefined;
        emits?: any;
        slots?: {
            [x: string]: {} | undefined;
        } | undefined;
        inheritAttrs?: boolean | undefined;
        displayName?: string | undefined;
        compatConfig?: {
            GLOBAL_MOUNT?: boolean | "suppress-warning" | undefined;
            GLOBAL_MOUNT_CONTAINER?: boolean | "suppress-warning" | undefined;
            GLOBAL_EXTEND?: boolean | "suppress-warning" | undefined;
            GLOBAL_PROTOTYPE?: boolean | "suppress-warning" | undefined;
            GLOBAL_SET?: boolean | "suppress-warning" | undefined;
            GLOBAL_DELETE?: boolean | "suppress-warning" | undefined;
            GLOBAL_OBSERVABLE?: boolean | "suppress-warning" | undefined;
            GLOBAL_PRIVATE_UTIL?: boolean | "suppress-warning" | undefined;
            CONFIG_SILENT?: boolean | "suppress-warning" | undefined;
            CONFIG_DEVTOOLS?: boolean | "suppress-warning" | undefined;
            CONFIG_KEY_CODES?: boolean | "suppress-warning" | undefined;
            CONFIG_PRODUCTION_TIP?: boolean | "suppress-warning" | undefined;
            CONFIG_IGNORED_ELEMENTS?: boolean | "suppress-warning" | undefined;
            CONFIG_WHITESPACE?: boolean | "suppress-warning" | undefined;
            CONFIG_OPTION_MERGE_STRATS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SET?: boolean | "suppress-warning" | undefined;
            INSTANCE_DELETE?: boolean | "suppress-warning" | undefined;
            INSTANCE_DESTROY?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_EMITTER?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_HOOKS?: boolean | "suppress-warning" | undefined;
            INSTANCE_CHILDREN?: boolean | "suppress-warning" | undefined;
            INSTANCE_LISTENERS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SCOPED_SLOTS?: boolean | "suppress-warning" | undefined;
            INSTANCE_ATTRS_CLASS_STYLE?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_FN?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_MERGE?: boolean | "suppress-warning" | undefined;
            OPTIONS_BEFORE_DESTROY?: boolean | "suppress-warning" | undefined;
            OPTIONS_DESTROYED?: boolean | "suppress-warning" | undefined;
            WATCH_ARRAY?: boolean | "suppress-warning" | undefined;
            PROPS_DEFAULT_THIS?: boolean | "suppress-warning" | undefined;
            V_ON_KEYCODE_MODIFIER?: boolean | "suppress-warning" | undefined;
            CUSTOM_DIR?: boolean | "suppress-warning" | undefined;
            ATTR_FALSE_VALUE?: boolean | "suppress-warning" | undefined;
            ATTR_ENUMERATED_COERCION?: boolean | "suppress-warning" | undefined;
            TRANSITION_CLASSES?: boolean | "suppress-warning" | undefined;
            TRANSITION_GROUP_ROOT?: boolean | "suppress-warning" | undefined;
            COMPONENT_ASYNC?: boolean | "suppress-warning" | undefined;
            COMPONENT_FUNCTIONAL?: boolean | "suppress-warning" | undefined;
            COMPONENT_V_MODEL?: boolean | "suppress-warning" | undefined;
            RENDER_FUNCTION?: boolean | "suppress-warning" | undefined;
            FILTERS?: boolean | "suppress-warning" | undefined;
            PRIVATE_APIS?: boolean | "suppress-warning" | undefined;
            MODE?: 2 | 3 | {} | undefined;
        } | undefined;
        __isBuiltIn?: boolean | undefined;
        __file?: string | undefined;
        __name?: string | undefined;
    } | {
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } | undefined;
} | undefined]>;
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $vaConfig: ReturnType<typeof createGlobalConfig>;
    }
}
