import { defineComponent, shallowRef, ref, computed, inject, onMounted, onBeforeUnmount, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, withKeys, toHandlers, renderSlot, createCommentVNode, toDisplayString } from "vue";
import { T as TabsViewKey } from "../../types.js";
import { V as VaIcon } from "../../../va-icon/index.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../../composables/useRouterLink.js";
import { u as useComponentPresetProp } from "../../../../composables/useComponentPreset.js";
import { u as useKeyboardOnlyFocus } from "../../../../composables/useKeyboardOnlyFocus.js";
import { u as useColors } from "../../../../composables/useColors.js";
const _hoisted_1 = ["tabindex"];
const _hoisted_2 = ["textContent"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaTab"
  },
  __name: "VaTab",
  props: {
    ...useRouterLinkProps,
    ...useComponentPresetProp,
    selected: { type: Boolean, default: false },
    color: { type: String, default: "" },
    icon: { type: String, default: "" },
    label: { type: String, default: "" },
    disabled: { type: Boolean },
    name: { type: [String, Number] },
    tag: { type: String, default: "div" }
  },
  emits: ["click", "keydown-enter", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const tabElement = shallowRef();
    const isActive = ref(false);
    const hoverState = ref(false);
    const rightSidePosition = ref(0);
    const leftSidePosition = ref(0);
    const { keyboardFocusListeners, hasKeyboardFocus } = useKeyboardOnlyFocus();
    const { tagComputed, hrefComputed, isActiveRouterLink } = useRouterLink(props);
    const classComputed = computed(() => ({ "va-tab--disabled": props.disabled }));
    const {
      parentDisabled,
      selectTab,
      moveToTab,
      registerTab,
      unregisterTab
    } = inject(TabsViewKey, {
      parentDisabled: false,
      tabsList: [],
      selectTab: (tab) => tab,
      moveToTab: (tab) => tab,
      registerTab: (tab) => tab,
      unregisterTab: (tab) => tab
    });
    const tabIndexComputed = computed(() => props.disabled || parentDisabled ? -1 : 0);
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const computedStyle = computed(() => ({
      color: hoverState.value || isActive.value ? colorComputed.value : "inherit"
    }));
    const updateHoverState = (isHover) => {
      hoverState.value = isHover;
    };
    const updateSidePositions = () => {
      var _a, _b;
      const componentOffsetLeft = ((_a = tabElement.value) == null ? void 0 : _a.offsetLeft) || 0;
      const componentOffsetWidth = ((_b = tabElement.value) == null ? void 0 : _b.offsetWidth) || 0;
      rightSidePosition.value = componentOffsetLeft + componentOffsetWidth;
      leftSidePosition.value = componentOffsetLeft;
    };
    const onTabClick = () => {
      selectTab(tabComponent);
      emit("click");
    };
    const onTabKeydown = () => {
      selectTab(tabComponent);
      emit("keydown-enter");
    };
    const onFocus = () => {
      if (hasKeyboardFocus.value) {
        moveToTab(tabComponent);
      }
      emit("focus");
    };
    const tabComponent = {
      name: computed(() => props.name),
      id: null,
      tabElement,
      isActive,
      tabIndexComputed,
      isActiveRouterLink,
      rightSidePosition,
      leftSidePosition,
      onTabClick,
      onTabKeydown,
      onFocus,
      updateSidePositions
    };
    onMounted(() => {
      registerTab(tabComponent);
    });
    onBeforeUnmount(() => {
      unregisterTab(tabComponent);
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(tagComputed)), {
        ref_key: "tabElement",
        ref: tabElement,
        class: normalizeClass(["va-tab", classComputed.value]),
        role: "tab",
        "aria-selected": isActive.value,
        "aria-disabled": _ctx.$props.disabled || unref(parentDisabled),
        href: unref(hrefComputed),
        target: _ctx.target,
        to: _ctx.to,
        replace: _ctx.replace,
        exact: _ctx.exact,
        "active-class": _ctx.activeClass,
        "exact-active-class": _ctx.exactActiveClass,
        style: normalizeStyle(computedStyle.value),
        onMouseenter: _cache[0] || (_cache[0] = ($event) => updateHoverState(true)),
        onMouseleave: _cache[1] || (_cache[1] = ($event) => updateHoverState(false))
      }, {
        default: withCtx(() => [
          createElementVNode("div", mergeProps({
            class: "va-tab__content",
            tabindex: tabIndexComputed.value,
            onFocus,
            onClick: onTabClick,
            onKeydown: withKeys(onTabKeydown, ["enter"])
          }, toHandlers(unref(keyboardFocusListeners), true)), [
            renderSlot(_ctx.$slots, "default", {}, () => [
              __props.icon ? (openBlock(), createBlock(unref(VaIcon), {
                key: 0,
                class: "va-tab__icon",
                size: "small",
                name: __props.icon
              }, null, 8, ["name"])) : createCommentVNode("", true),
              createElementVNode("span", {
                class: "va-tab__label",
                textContent: toDisplayString(__props.label)
              }, null, 8, _hoisted_2)
            ])
          ], 16, _hoisted_1)
        ]),
        _: 3
      }, 40, ["aria-selected", "aria-disabled", "href", "target", "to", "replace", "exact", "active-class", "exact-active-class", "class", "style"]);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../../../VaTab.css';
//# sourceMappingURL=VaTab.vue_vue_type_script_setup_true_lang.js.map
