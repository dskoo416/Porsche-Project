import { defineComponent, shallowRef, computed, watch, nextTick, openBlock, createElementBlock, mergeProps, unref, withKeys, createElementVNode, createBlock, Fragment, createTextVNode, toDisplayString } from "vue";
import { V as VaIcon } from "../va-icon/index.js";
import { u as unFunction } from "../../utils/un-function.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { u as useBem } from "../../composables/useBem.js";
const _hoisted_1 = { class: "va-stepper__step-button__icon" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaStepperStepButton"
  },
  __name: "VaStepperStepButton",
  props: {
    modelValue: { type: Number, required: true },
    step: {
      type: Object,
      required: true
    },
    color: { type: String, required: true },
    stepIndex: { type: Number, required: true },
    navigationDisabled: { type: Boolean, required: true },
    nextDisabled: { type: Boolean, required: true },
    focus: { type: Object, required: true },
    stepControls: { type: Object, required: true }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const stepElement = shallowRef();
    const hasError = computed(() => props.step.hasError);
    const { getColor } = useColors();
    const stepperColor = computed(() => getColor(hasError.value ? "danger" : props.color));
    const isNextStepDisabled = (index) => props.nextDisabled && index > props.modelValue;
    const { t } = useTranslation();
    const computedClass = useBem("va-stepper__step-button", () => ({
      active: props.modelValue >= props.stepIndex,
      disabled: props.step.disabled || isNextStepDisabled(props.stepIndex),
      "navigation-disabled": props.navigationDisabled,
      error: unFunction(hasError.value, props.step) || false
    }));
    watch(() => props.focus, () => {
      if (props.focus.trigger) {
        nextTick(() => {
          var _a;
          return (_a = stepElement.value) == null ? void 0 : _a.focus();
        });
      }
    }, { deep: true });
    const ariaAttributesComputed = computed(() => ({
      tabindex: props.focus.stepIndex === props.stepIndex && !props.navigationDisabled ? 0 : void 0,
      "aria-disabled": props.step.disabled || isNextStepDisabled(props.stepIndex) ? true : void 0,
      "aria-current": props.modelValue === props.stepIndex ? t("step") : void 0
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", mergeProps({
        ref_key: "stepElement",
        ref: stepElement,
        class: ["va-stepper__step-button", unref(computedClass)],
        onClick: _cache[0] || (_cache[0] = ($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex)),
        onKeyup: [
          _cache[1] || (_cache[1] = withKeys(($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex), ["enter"])),
          _cache[2] || (_cache[2] = withKeys(($event) => !_ctx.$props.navigationDisabled && _ctx.$props.stepControls.setStep(_ctx.$props.stepIndex), ["space"]))
        ]
      }, ariaAttributesComputed.value, {
        style: `--va-stepper-color: ${String(stepperColor.value)}`
      }), [
        createElementVNode("div", _hoisted_1, [
          __props.step.icon ? (openBlock(), createBlock(unref(VaIcon), {
            key: 0,
            name: __props.step.icon,
            size: "1.3rem"
          }, null, 8, ["name"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(_ctx.$props.stepIndex + 1), 1)
          ], 64))
        ]),
        createTextVNode(" " + toDisplayString(__props.step.label), 1)
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};

import '../../../VaStepperStepButton.css';
//# sourceMappingURL=VaStepperStepButton.vue_vue_type_script_setup_true_lang.js.map
