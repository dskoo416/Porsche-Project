import { defineComponent, shallowRef, ref, watch, computed, openBlock, createElementBlock, mergeProps, createElementVNode, normalizeClass, withKeys, Fragment, renderList, renderSlot, normalizeProps, createCommentVNode, guardReactiveProps, createVNode, unref, createBlock } from "vue";
import { _ as _sfc_main$2 } from "./VaStepperControls.vue_vue_type_script_setup_true_lang.mjs";
import { _ as _sfc_main$1 } from "./VaStepperStepButton.vue_vue_type_script_setup_true_lang.mjs";
import { u as unFunction } from "../../utils/un-function.mjs";
import { u as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useColors } from "../../composables/useColors.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
const _hoisted_1 = {
  key: 0,
  class: "va-stepper__step-content"
};
const _hoisted_2 = { class: "va-stepper__controls" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "VaStepper"
  },
  __name: "VaStepper",
  props: {
    ...useStatefulProps,
    modelValue: { type: Number, default: 0 },
    steps: {
      type: Array,
      default: () => [],
      required: true
    },
    color: { type: String, default: "primary" },
    vertical: { type: Boolean, default: false },
    navigationDisabled: { type: Boolean, default: false },
    controlsHidden: { type: Boolean, default: false },
    nextDisabled: { type: Boolean, default: false },
    finishButtonHidden: { type: Boolean, default: false },
    ariaLabel: { type: String, default: "$t:progress" },
    linear: { type: Boolean, default: false }
  },
  emits: ["update:modelValue", "finish", "update:steps"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const stepperNavigation = shallowRef();
    const { valueComputed: modelValue } = useStateful(props, emit, "modelValue");
    const focusedStep = ref({ trigger: false, stepIndex: props.navigationDisabled ? -1 : props.modelValue });
    const { getColor } = useColors();
    const isNextStepDisabled = (index) => props.nextDisabled && index > modelValue.value;
    const findFirstNonDisabled = (from, direction) => {
      while (from >= 0 && from < props.steps.length) {
        from += direction;
        const step = props.steps[from];
        if (!step) {
          return;
        }
        if (!step.disabled) {
          return step;
        }
      }
    };
    const findFirstWithErrorIndex = (from, direction) => {
      while (from >= 0 && from < props.steps.length) {
        from += direction;
        const step = props.steps[from];
        if (!step) {
          return;
        }
        if (step.hasError === true) {
          return from;
        }
      }
    };
    const validateMovingToStep = (stepIndex) => {
      var _a;
      const newStep = props.steps[stepIndex];
      const currentStep = props.steps[modelValue.value];
      const beforeNewStep = findFirstNonDisabled(stepIndex, -1);
      if (newStep.disabled) {
        return false;
      }
      if (props.linear && stepIndex < modelValue.value) {
        return true;
      }
      const nextNonError = findFirstWithErrorIndex(modelValue.value, 1);
      if (props.linear && nextNonError !== void 0 && nextNonError < stepIndex) {
        return false;
      }
      if (((_a = currentStep.beforeLeave) == null ? void 0 : _a.call(currentStep, currentStep, newStep)) === false) {
        return false;
      }
      if (currentStep.completed === void 0) {
        currentStep.completed = true;
      }
      if (props.linear && beforeNewStep && !beforeNewStep.completed) {
        return false;
      }
      if (props.linear && unFunction(currentStep.hasError, currentStep)) {
        return false;
      }
      return true;
    };
    const setStep = (index) => {
      if (!validateMovingToStep(index)) {
        return;
      }
      emit("update:modelValue", index);
    };
    const setFocus = (direction) => {
      if (props.navigationDisabled) {
        return;
      }
      if (direction === "next") {
        setFocusNextStep(1);
      } else {
        setFocusPrevStep(1);
      }
    };
    const setFocusNextStep = (idx) => {
      const newValue = focusedStep.value.stepIndex + idx;
      if (isNextStepDisabled(newValue)) {
        return;
      }
      if (newValue < props.steps.length) {
        if (props.steps[newValue].disabled) {
          setFocusNextStep(idx + 1);
          return;
        }
        focusedStep.value.stepIndex = newValue;
        focusedStep.value.trigger = true;
      } else {
        for (let availableIdx = 0; availableIdx < props.steps.length; availableIdx++) {
          if (!props.steps[availableIdx].disabled) {
            focusedStep.value.stepIndex = availableIdx;
            focusedStep.value.trigger = true;
            break;
          }
        }
      }
    };
    const setFocusPrevStep = (idx) => {
      const newValue = focusedStep.value.stepIndex - idx;
      if (newValue >= 0) {
        if (props.steps[newValue].disabled) {
          setFocusPrevStep(idx + 1);
          return;
        }
        focusedStep.value.stepIndex = newValue;
        focusedStep.value.trigger = true;
      } else {
        for (let availableIdx = props.steps.length - 1; availableIdx >= 0; availableIdx--) {
          if (!props.steps[availableIdx].disabled && !isNextStepDisabled(availableIdx)) {
            focusedStep.value.stepIndex = availableIdx;
            focusedStep.value.trigger = true;
            break;
          }
        }
      }
    };
    const resetFocus = () => {
      requestAnimationFrame(() => {
        var _a;
        if (!((_a = stepperNavigation.value) == null ? void 0 : _a.contains(document.activeElement))) {
          focusedStep.value.stepIndex = props.modelValue;
          focusedStep.value.trigger = false;
        }
      });
    };
    watch(() => props.modelValue, () => {
      focusedStep.value.stepIndex = props.modelValue;
      focusedStep.value.trigger = false;
    });
    const nextStep = (stepsToSkip = 0) => {
      const targetIndex = modelValue.value + 1 + stepsToSkip;
      if (!props.steps[targetIndex]) {
        return;
      }
      if (props.steps[targetIndex].disabled) {
        nextStep(stepsToSkip + 1);
      }
      setStep(targetIndex);
    };
    const prevStep = (stepsToSkip = 0) => {
      const targetIndex = modelValue.value - 1 - stepsToSkip;
      if (!props.steps[targetIndex]) {
        return;
      }
      if (props.steps[targetIndex].disabled) {
        prevStep(stepsToSkip + 1);
      }
      setStep(targetIndex);
    };
    const stepControls = { setStep, nextStep, prevStep };
    const getIterableSlotData = (step, index) => ({
      ...stepControls,
      focus: focusedStep,
      isActive: props.modelValue === index,
      isCompleted: props.modelValue > index,
      isLastStep: props.steps.length - 1 === index,
      isNextStepDisabled: isNextStepDisabled(index),
      index,
      step
    });
    const { tp } = useTranslation();
    const onArrowKeyPress = (direction) => {
      setFocus(direction);
    };
    const onValueChange = () => {
      focusedStep.value.stepIndex = props.modelValue;
      focusedStep.value.trigger = true;
    };
    const ariaAttributesComputed = computed(() => ({
      role: "group",
      "aria-label": tp(props.ariaLabel),
      "aria-orientation": props.vertical ? "vertical" : "horizontal"
    }));
    function getStepperButtonColor(index) {
      var _a;
      return ((_a = props.steps[index]) == null ? void 0 : _a.hasError) ? "danger" : getColor(props.color);
    }
    const completeStep = (shouldCompleteStep) => {
      const steps = { ...props.steps };
      if (shouldCompleteStep === true) {
        steps[props.modelValue].hasError = false;
      }
      steps[props.modelValue].completed = shouldCompleteStep ?? true;
      emit("update:steps", steps);
    };
    const setError = (shouldSetError) => {
      const steps = { ...props.steps };
      steps[props.modelValue].hasError = shouldSetError ?? true;
      steps[props.modelValue].completed = !shouldSetError;
      emit("update:steps", steps);
    };
    __expose({
      modelValue,
      focusedStep,
      getIterableSlotData,
      stepControls,
      nextStep,
      prevStep,
      setStep,
      setFocus,
      completeStep,
      setError
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        class: ["va-stepper", { "va-stepper--vertical": _ctx.$props.vertical }]
      }, ariaAttributesComputed.value), [
        createElementVNode("ol", {
          class: normalizeClass(["va-stepper__navigation", { "va-stepper__navigation--vertical": _ctx.$props.vertical }]),
          ref_key: "stepperNavigation",
          ref: stepperNavigation,
          onClick: onValueChange,
          onKeyup: [
            withKeys(onValueChange, ["enter"]),
            withKeys(onValueChange, ["space"]),
            _cache[0] || (_cache[0] = withKeys(($event) => onArrowKeyPress("prev"), ["left"])),
            _cache[1] || (_cache[1] = withKeys(($event) => onArrowKeyPress("next"), ["right"]))
          ],
          onFocusout: resetFocus
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.steps, (step, i) => {
            return openBlock(), createElementBlock(Fragment, {
              key: i + step.label
            }, [
              i > 0 ? renderSlot(_ctx.$slots, "divider", normalizeProps(mergeProps({ key: 0 }, getIterableSlotData(step, i))), () => [
                createElementVNode("span", {
                  class: normalizeClass(["va-stepper__divider", { "va-stepper__divider--vertical": _ctx.$props.vertical }]),
                  "aria-hidden": "true"
                }, null, 2)
              ]) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, `step-button-${i}`, normalizeProps(guardReactiveProps(getIterableSlotData(step, i))), () => [
                createVNode(_sfc_main$1, {
                  stepIndex: i,
                  color: getStepperButtonColor(i),
                  modelValue: unref(modelValue),
                  nextDisabled: __props.nextDisabled,
                  step,
                  stepControls,
                  navigationDisabled: __props.navigationDisabled,
                  focus: focusedStep.value
                }, null, 8, ["stepIndex", "color", "modelValue", "nextDisabled", "step", "navigationDisabled", "focus"])
              ])
            ], 64);
          }), 128))
        ], 34),
        createElementVNode("div", {
          class: normalizeClass(["va-stepper__step-content-wrapper", { "va-stepper__step-content-wrapper--vertical": _ctx.$props.vertical }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.steps, (step, i) => {
            return openBlock(), createElementBlock(Fragment, { key: i }, [
              _ctx.$slots[`step-content-${i}`] && unref(modelValue) === i ? (openBlock(), createElementBlock("div", _hoisted_1, [
                renderSlot(_ctx.$slots, `step-content-${i}`, normalizeProps(guardReactiveProps(getIterableSlotData(step, i))))
              ])) : createCommentVNode("", true)
            ], 64);
          }), 128)),
          createElementVNode("div", _hoisted_2, [
            !__props.controlsHidden ? (openBlock(), createBlock(_sfc_main$2, {
              key: 0,
              modelValue: unref(modelValue),
              nextDisabled: __props.nextDisabled,
              steps: __props.steps,
              stepControls,
              finishButtonHidden: __props.finishButtonHidden,
              onFinish: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("finish"))
            }, null, 8, ["modelValue", "nextDisabled", "steps", "finishButtonHidden"])) : createCommentVNode("", true),
            renderSlot(_ctx.$slots, "controls", normalizeProps(guardReactiveProps(getIterableSlotData(__props.steps[unref(modelValue)], unref(modelValue)))))
          ])
        ], 2)
      ], 16);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaStepper.vue_vue_type_script_setup_true_lang.mjs.map
