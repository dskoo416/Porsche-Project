{"version":3,"file":"sync-tailwind.cjs","sources":["../sync-tailwind.ts"],"sourcesContent":["import { convertValueToString, tailwindConfigPath } from './helpers/helpers'\nimport { tailwindThresholdsSync } from './modules/breakpoint'\nimport { tailwindColorsSync } from './modules/colors'\n\nconst fs = require('fs')\n\nconst vuesticConfigFilename = 'vuestic.config.js'\n\n/**\n * @description writes vuestic config to the file\n * @param config vuestic config in raw string format\n */\nconst updateVuesticConfig = (config?: string) => {\n  try {\n    const vuesticConfig = '// Do not insert custom values to the colors or breakpoints Vuestic UI config\\n' +\n      '// or they will be overwritten! Use Tailwind CSS config instead.' +\n      `\\n\\nexport default ${config ?? '{}'}`\n\n    fs.writeFileSync(vuesticConfigFilename, vuesticConfig)\n\n    console.log(`${vuesticConfigFilename} was successfully synchronized with Tailwind CSS config!`)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\n/**\n * @description forming vuestic config from tailwind configuration (custom or default)\n */\nexport const integrateTailwindConfig = async () => {\n    if (!tailwindConfigPath) { console.log('Tailwind CSS config file not found. Proceeding with default Tailwind CSS settings.') }\n    const tailwindConfig = tailwindConfigPath ? await (() => import(tailwindConfigPath))() : undefined\n\n    const tailwindColors = tailwindColorsSync(tailwindConfig)\n    const tailwindThresholds = tailwindThresholdsSync(tailwindConfig)\n\n    const vuesticConfig = {\n      breakpoints: {\n        thresholds: tailwindThresholds,\n      },\n      colors: {\n        variables: tailwindColors,\n      },\n    }\n\n    updateVuesticConfig(convertValueToString(vuesticConfig))\n\n    tailwindConfigPath && delete require.cache[require.resolve(tailwindConfigPath)]\n  }\n"],"names":["fs","require","async","tailwindConfigPath","console","log","tailwindConfig","tailwindColors","tailwindColorsSync","vuesticConfig","breakpoints","thresholds","tailwindThresholdsSync","colors","variables","config","writeFileSync","e","convertValueToString","cache","resolve"],"mappings":"ugBAIA,MAAMA,EAAKC,QAAQ,sCAyBoBC,UAC9BC,EAAAA,oBAAsBC,QAAQC,IAAI,sFACjC,MAAAC,EAAiBH,EAAqBA,+CAAoBA,OAAAA,EAAAA,EAAAA,mBAAAA,QAAAA,UAAAA,MAAAA,WAAAA,OAAAA,kBAAAA,QAAAA,OAAAA,IAAAA,iBAAyB,EAEnFI,EAAiBC,qBAAmBF,GAGpCG,EAAgB,CACpBC,YAAa,CACXC,WAJuBC,yBAAuBN,IAMhDO,OAAQ,CACNC,UAAWP,IA7BS,CAACQ,IACvB,IACF,MAAMN,EAAgB,qKAEY,MAAVM,EAAUA,EAAA,OAE/Bf,EAAAgB,cAZuB,oBAYcP,GAEhCL,QAAAC,IAAI,mFACLY,GACPb,QAAQC,IAAIY,KAuBQC,CAAAA,EAAAA,qBAAqBT,IAEzCN,EAAAA,2BAA6BF,QAAQkB,MAAMlB,QAAQmB,QAAQjB,EAAkBA"}